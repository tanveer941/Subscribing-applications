// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Radar.proto

#include "Radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Radar {
class BsigDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BsigDataRequest>
      _instance;
} _BsigDataRequest_default_instance_;
class BSigDataOfEachSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BSigDataOfEachSignal>
      _instance;
} _BSigDataOfEachSignal_default_instance_;
class BsigDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BsigDataResponse>
      _instance;
} _BsigDataResponse_default_instance_;
}  // namespace Radar
namespace protobuf_Radar_2eproto {
void InitDefaultsBsigDataRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Radar::_BsigDataRequest_default_instance_;
    new (ptr) ::Radar::BsigDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Radar::BsigDataRequest::InitAsDefaultInstance();
}

void InitDefaultsBsigDataRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBsigDataRequestImpl);
}

void InitDefaultsBSigDataOfEachSignalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Radar::_BSigDataOfEachSignal_default_instance_;
    new (ptr) ::Radar::BSigDataOfEachSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Radar::BSigDataOfEachSignal::InitAsDefaultInstance();
}

void InitDefaultsBSigDataOfEachSignal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBSigDataOfEachSignalImpl);
}

void InitDefaultsBsigDataResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Radar_2eproto::InitDefaultsBSigDataOfEachSignal();
  {
    void* ptr = &::Radar::_BsigDataResponse_default_instance_;
    new (ptr) ::Radar::BsigDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Radar::BsigDataResponse::InitAsDefaultInstance();
}

void InitDefaultsBsigDataResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBsigDataResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BsigDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BsigDataRequest, bsigpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BsigDataRequest, objectidcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BsigDataRequest, signalnames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BSigDataOfEachSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BSigDataOfEachSignal, signalname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BSigDataOfEachSignal, objectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BSigDataOfEachSignal, signalvalues_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BsigDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BsigDataResponse, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Radar::BsigDataResponse, eachsigvalues_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Radar::BsigDataRequest)},
  { 8, -1, sizeof(::Radar::BSigDataOfEachSignal)},
  { 16, -1, sizeof(::Radar::BsigDataResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Radar::_BsigDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Radar::_BSigDataOfEachSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Radar::_BsigDataResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Radar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Radar.proto\022\005Radar\"O\n\017BsigDataRequest\022"
      "\020\n\010bsigPath\030\001 \001(\t\022\025\n\robjectIdCount\030\002 \001(\005"
      "\022\023\n\013signalNames\030\003 \003(\t\"R\n\024BSigDataOfEachS"
      "ignal\022\022\n\nsignalName\030\001 \001(\t\022\020\n\010objectId\030\002 "
      "\001(\005\022\024\n\014signalvalues\030\003 \003(\001\"Y\n\020BsigDataRes"
      "ponse\022\021\n\ttimeStamp\030\001 \003(\004\0222\n\reachSigValue"
      "s\030\002 \003(\0132\033.Radar.BSigDataOfEachSignalB\002H\001"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Radar.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Radar_2eproto
namespace Radar {

// ===================================================================

void BsigDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BsigDataRequest::kBsigPathFieldNumber;
const int BsigDataRequest::kObjectIdCountFieldNumber;
const int BsigDataRequest::kSignalNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BsigDataRequest::BsigDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Radar_2eproto::InitDefaultsBsigDataRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Radar.BsigDataRequest)
}
BsigDataRequest::BsigDataRequest(const BsigDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signalnames_(from.signalnames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bsigpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bsigpath().size() > 0) {
    bsigpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bsigpath_);
  }
  objectidcount_ = from.objectidcount_;
  // @@protoc_insertion_point(copy_constructor:Radar.BsigDataRequest)
}

void BsigDataRequest::SharedCtor() {
  bsigpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectidcount_ = 0;
  _cached_size_ = 0;
}

BsigDataRequest::~BsigDataRequest() {
  // @@protoc_insertion_point(destructor:Radar.BsigDataRequest)
  SharedDtor();
}

void BsigDataRequest::SharedDtor() {
  bsigpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BsigDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BsigDataRequest::descriptor() {
  ::protobuf_Radar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Radar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BsigDataRequest& BsigDataRequest::default_instance() {
  ::protobuf_Radar_2eproto::InitDefaultsBsigDataRequest();
  return *internal_default_instance();
}

BsigDataRequest* BsigDataRequest::New(::google::protobuf::Arena* arena) const {
  BsigDataRequest* n = new BsigDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BsigDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Radar.BsigDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalnames_.Clear();
  bsigpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectidcount_ = 0;
  _internal_metadata_.Clear();
}

bool BsigDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Radar.BsigDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bsigPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bsigpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bsigpath().data(), static_cast<int>(this->bsigpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Radar.BsigDataRequest.bsigPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 objectIdCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectidcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signalNames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signalnames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signalnames(this->signalnames_size() - 1).data(),
            static_cast<int>(this->signalnames(this->signalnames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Radar.BsigDataRequest.signalNames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Radar.BsigDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Radar.BsigDataRequest)
  return false;
#undef DO_
}

void BsigDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Radar.BsigDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bsigPath = 1;
  if (this->bsigpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bsigpath().data(), static_cast<int>(this->bsigpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Radar.BsigDataRequest.bsigPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bsigpath(), output);
  }

  // int32 objectIdCount = 2;
  if (this->objectidcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectidcount(), output);
  }

  // repeated string signalNames = 3;
  for (int i = 0, n = this->signalnames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signalnames(i).data(), static_cast<int>(this->signalnames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Radar.BsigDataRequest.signalNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signalnames(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Radar.BsigDataRequest)
}

::google::protobuf::uint8* BsigDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Radar.BsigDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bsigPath = 1;
  if (this->bsigpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bsigpath().data(), static_cast<int>(this->bsigpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Radar.BsigDataRequest.bsigPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bsigpath(), target);
  }

  // int32 objectIdCount = 2;
  if (this->objectidcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectidcount(), target);
  }

  // repeated string signalNames = 3;
  for (int i = 0, n = this->signalnames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signalnames(i).data(), static_cast<int>(this->signalnames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Radar.BsigDataRequest.signalNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->signalnames(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Radar.BsigDataRequest)
  return target;
}

size_t BsigDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Radar.BsigDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string signalNames = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signalnames_size());
  for (int i = 0, n = this->signalnames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signalnames(i));
  }

  // string bsigPath = 1;
  if (this->bsigpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bsigpath());
  }

  // int32 objectIdCount = 2;
  if (this->objectidcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->objectidcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BsigDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Radar.BsigDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BsigDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BsigDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Radar.BsigDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Radar.BsigDataRequest)
    MergeFrom(*source);
  }
}

void BsigDataRequest::MergeFrom(const BsigDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Radar.BsigDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalnames_.MergeFrom(from.signalnames_);
  if (from.bsigpath().size() > 0) {

    bsigpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bsigpath_);
  }
  if (from.objectidcount() != 0) {
    set_objectidcount(from.objectidcount());
  }
}

void BsigDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Radar.BsigDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsigDataRequest::CopyFrom(const BsigDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Radar.BsigDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsigDataRequest::IsInitialized() const {
  return true;
}

void BsigDataRequest::Swap(BsigDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BsigDataRequest::InternalSwap(BsigDataRequest* other) {
  using std::swap;
  signalnames_.InternalSwap(&other->signalnames_);
  bsigpath_.Swap(&other->bsigpath_);
  swap(objectidcount_, other->objectidcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BsigDataRequest::GetMetadata() const {
  protobuf_Radar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Radar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BSigDataOfEachSignal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BSigDataOfEachSignal::kSignalNameFieldNumber;
const int BSigDataOfEachSignal::kObjectIdFieldNumber;
const int BSigDataOfEachSignal::kSignalvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BSigDataOfEachSignal::BSigDataOfEachSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Radar_2eproto::InitDefaultsBSigDataOfEachSignal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Radar.BSigDataOfEachSignal)
}
BSigDataOfEachSignal::BSigDataOfEachSignal(const BSigDataOfEachSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signalvalues_(from.signalvalues_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signalname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signalname().size() > 0) {
    signalname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signalname_);
  }
  objectid_ = from.objectid_;
  // @@protoc_insertion_point(copy_constructor:Radar.BSigDataOfEachSignal)
}

void BSigDataOfEachSignal::SharedCtor() {
  signalname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_ = 0;
  _cached_size_ = 0;
}

BSigDataOfEachSignal::~BSigDataOfEachSignal() {
  // @@protoc_insertion_point(destructor:Radar.BSigDataOfEachSignal)
  SharedDtor();
}

void BSigDataOfEachSignal::SharedDtor() {
  signalname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BSigDataOfEachSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BSigDataOfEachSignal::descriptor() {
  ::protobuf_Radar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Radar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BSigDataOfEachSignal& BSigDataOfEachSignal::default_instance() {
  ::protobuf_Radar_2eproto::InitDefaultsBSigDataOfEachSignal();
  return *internal_default_instance();
}

BSigDataOfEachSignal* BSigDataOfEachSignal::New(::google::protobuf::Arena* arena) const {
  BSigDataOfEachSignal* n = new BSigDataOfEachSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BSigDataOfEachSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Radar.BSigDataOfEachSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalvalues_.Clear();
  signalname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objectid_ = 0;
  _internal_metadata_.Clear();
}

bool BSigDataOfEachSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Radar.BSigDataOfEachSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signalName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signalname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signalname().data(), static_cast<int>(this->signalname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Radar.BSigDataOfEachSignal.signalName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 objectId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double signalvalues = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_signalvalues())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_signalvalues())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Radar.BSigDataOfEachSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Radar.BSigDataOfEachSignal)
  return false;
#undef DO_
}

void BSigDataOfEachSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Radar.BSigDataOfEachSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signalName = 1;
  if (this->signalname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signalname().data(), static_cast<int>(this->signalname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Radar.BSigDataOfEachSignal.signalName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signalname(), output);
  }

  // int32 objectId = 2;
  if (this->objectid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectid(), output);
  }

  // repeated double signalvalues = 3;
  if (this->signalvalues_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _signalvalues_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->signalvalues().data(), this->signalvalues_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Radar.BSigDataOfEachSignal)
}

::google::protobuf::uint8* BSigDataOfEachSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Radar.BSigDataOfEachSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signalName = 1;
  if (this->signalname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signalname().data(), static_cast<int>(this->signalname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Radar.BSigDataOfEachSignal.signalName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signalname(), target);
  }

  // int32 objectId = 2;
  if (this->objectid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectid(), target);
  }

  // repeated double signalvalues = 3;
  if (this->signalvalues_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _signalvalues_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->signalvalues_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Radar.BSigDataOfEachSignal)
  return target;
}

size_t BSigDataOfEachSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Radar.BSigDataOfEachSignal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double signalvalues = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->signalvalues_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _signalvalues_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string signalName = 1;
  if (this->signalname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signalname());
  }

  // int32 objectId = 2;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->objectid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BSigDataOfEachSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Radar.BSigDataOfEachSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const BSigDataOfEachSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BSigDataOfEachSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Radar.BSigDataOfEachSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Radar.BSigDataOfEachSignal)
    MergeFrom(*source);
  }
}

void BSigDataOfEachSignal::MergeFrom(const BSigDataOfEachSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Radar.BSigDataOfEachSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalvalues_.MergeFrom(from.signalvalues_);
  if (from.signalname().size() > 0) {

    signalname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signalname_);
  }
  if (from.objectid() != 0) {
    set_objectid(from.objectid());
  }
}

void BSigDataOfEachSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Radar.BSigDataOfEachSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSigDataOfEachSignal::CopyFrom(const BSigDataOfEachSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Radar.BSigDataOfEachSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSigDataOfEachSignal::IsInitialized() const {
  return true;
}

void BSigDataOfEachSignal::Swap(BSigDataOfEachSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BSigDataOfEachSignal::InternalSwap(BSigDataOfEachSignal* other) {
  using std::swap;
  signalvalues_.InternalSwap(&other->signalvalues_);
  signalname_.Swap(&other->signalname_);
  swap(objectid_, other->objectid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BSigDataOfEachSignal::GetMetadata() const {
  protobuf_Radar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Radar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BsigDataResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BsigDataResponse::kTimeStampFieldNumber;
const int BsigDataResponse::kEachSigValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BsigDataResponse::BsigDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Radar_2eproto::InitDefaultsBsigDataResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Radar.BsigDataResponse)
}
BsigDataResponse::BsigDataResponse(const BsigDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      timestamp_(from.timestamp_),
      eachsigvalues_(from.eachsigvalues_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Radar.BsigDataResponse)
}

void BsigDataResponse::SharedCtor() {
  _cached_size_ = 0;
}

BsigDataResponse::~BsigDataResponse() {
  // @@protoc_insertion_point(destructor:Radar.BsigDataResponse)
  SharedDtor();
}

void BsigDataResponse::SharedDtor() {
}

void BsigDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BsigDataResponse::descriptor() {
  ::protobuf_Radar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Radar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BsigDataResponse& BsigDataResponse::default_instance() {
  ::protobuf_Radar_2eproto::InitDefaultsBsigDataResponse();
  return *internal_default_instance();
}

BsigDataResponse* BsigDataResponse::New(::google::protobuf::Arena* arena) const {
  BsigDataResponse* n = new BsigDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BsigDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Radar.BsigDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.Clear();
  eachsigvalues_.Clear();
  _internal_metadata_.Clear();
}

bool BsigDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Radar.BsigDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 timeStamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_timestamp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_timestamp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Radar.BSigDataOfEachSignal eachSigValues = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_eachsigvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Radar.BsigDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Radar.BsigDataResponse)
  return false;
#undef DO_
}

void BsigDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Radar.BsigDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 timeStamp = 1;
  if (this->timestamp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _timestamp_cached_byte_size_));
  }
  for (int i = 0, n = this->timestamp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->timestamp(i), output);
  }

  // repeated .Radar.BSigDataOfEachSignal eachSigValues = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->eachsigvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eachsigvalues(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Radar.BsigDataResponse)
}

::google::protobuf::uint8* BsigDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Radar.BsigDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 timeStamp = 1;
  if (this->timestamp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _timestamp_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->timestamp_, target);
  }

  // repeated .Radar.BSigDataOfEachSignal eachSigValues = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->eachsigvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->eachsigvalues(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Radar.BsigDataResponse)
  return target;
}

size_t BsigDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Radar.BsigDataResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 timeStamp = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _timestamp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Radar.BSigDataOfEachSignal eachSigValues = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->eachsigvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->eachsigvalues(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BsigDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Radar.BsigDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BsigDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BsigDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Radar.BsigDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Radar.BsigDataResponse)
    MergeFrom(*source);
  }
}

void BsigDataResponse::MergeFrom(const BsigDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Radar.BsigDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timestamp_.MergeFrom(from.timestamp_);
  eachsigvalues_.MergeFrom(from.eachsigvalues_);
}

void BsigDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Radar.BsigDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsigDataResponse::CopyFrom(const BsigDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Radar.BsigDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsigDataResponse::IsInitialized() const {
  return true;
}

void BsigDataResponse::Swap(BsigDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BsigDataResponse::InternalSwap(BsigDataResponse* other) {
  using std::swap;
  timestamp_.InternalSwap(&other->timestamp_);
  eachsigvalues_.InternalSwap(&other->eachsigvalues_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BsigDataResponse::GetMetadata() const {
  protobuf_Radar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Radar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Radar

// @@protoc_insertion_point(global_scope)
