// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageservice.proto

#ifndef PROTOBUF_imageservice_2eproto__INCLUDED
#define PROTOBUF_imageservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_imageservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsImgCntRequestImpl();
void InitDefaultsImgCntRequest();
void InitDefaultsImgCntResponseImpl();
void InitDefaultsImgCntResponse();
void InitDefaultsinfoChannelRequestImpl();
void InitDefaultsinfoChannelRequest();
void InitDefaultsdeviceDataImpl();
void InitDefaultsdeviceData();
void InitDefaultschannelInfoImpl();
void InitDefaultschannelInfo();
void InitDefaultssourceFileRequestImpl();
void InitDefaultssourceFileRequest();
void InitDefaultssourceFileRespImpl();
void InitDefaultssourceFileResp();
void InitDefaultssetSourceFolderRequestImpl();
void InitDefaultssetSourceFolderRequest();
void InitDefaultssetSourceFolderRespImpl();
void InitDefaultssetSourceFolderResp();
void InitDefaultsdevicesDataRequestImpl();
void InitDefaultsdevicesDataRequest();
void InitDefaultsdevicesDataResponseImpl();
void InitDefaultsdevicesDataResponse();
void InitDefaultsPixelImageDataImpl();
void InitDefaultsPixelImageData();
void InitDefaultsImageRequestImpl();
void InitDefaultsImageRequest();
void InitDefaultsImageResponseImpl();
void InitDefaultsImageResponse();
void InitDefaultsImageDeleteRequestImpl();
void InitDefaultsImageDeleteRequest();
void InitDefaultsPixelLabelWriteRequestImpl();
void InitDefaultsPixelLabelWriteRequest();
void InitDefaultsPixelLabelWriteResponseImpl();
void InitDefaultsPixelLabelWriteResponse();
void InitDefaultsHFLResponseImpl();
void InitDefaultsHFLResponse();
inline void InitDefaults() {
  InitDefaultsImgCntRequest();
  InitDefaultsImgCntResponse();
  InitDefaultsinfoChannelRequest();
  InitDefaultsdeviceData();
  InitDefaultschannelInfo();
  InitDefaultssourceFileRequest();
  InitDefaultssourceFileResp();
  InitDefaultssetSourceFolderRequest();
  InitDefaultssetSourceFolderResp();
  InitDefaultsdevicesDataRequest();
  InitDefaultsdevicesDataResponse();
  InitDefaultsPixelImageData();
  InitDefaultsImageRequest();
  InitDefaultsImageResponse();
  InitDefaultsImageDeleteRequest();
  InitDefaultsPixelLabelWriteRequest();
  InitDefaultsPixelLabelWriteResponse();
  InitDefaultsHFLResponse();
}
}  // namespace protobuf_imageservice_2eproto
namespace ImageService {
class HFLResponse;
class HFLResponseDefaultTypeInternal;
extern HFLResponseDefaultTypeInternal _HFLResponse_default_instance_;
class ImageDeleteRequest;
class ImageDeleteRequestDefaultTypeInternal;
extern ImageDeleteRequestDefaultTypeInternal _ImageDeleteRequest_default_instance_;
class ImageRequest;
class ImageRequestDefaultTypeInternal;
extern ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
class ImageResponse;
class ImageResponseDefaultTypeInternal;
extern ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
class ImgCntRequest;
class ImgCntRequestDefaultTypeInternal;
extern ImgCntRequestDefaultTypeInternal _ImgCntRequest_default_instance_;
class ImgCntResponse;
class ImgCntResponseDefaultTypeInternal;
extern ImgCntResponseDefaultTypeInternal _ImgCntResponse_default_instance_;
class PixelImageData;
class PixelImageDataDefaultTypeInternal;
extern PixelImageDataDefaultTypeInternal _PixelImageData_default_instance_;
class PixelLabelWriteRequest;
class PixelLabelWriteRequestDefaultTypeInternal;
extern PixelLabelWriteRequestDefaultTypeInternal _PixelLabelWriteRequest_default_instance_;
class PixelLabelWriteResponse;
class PixelLabelWriteResponseDefaultTypeInternal;
extern PixelLabelWriteResponseDefaultTypeInternal _PixelLabelWriteResponse_default_instance_;
class channelInfo;
class channelInfoDefaultTypeInternal;
extern channelInfoDefaultTypeInternal _channelInfo_default_instance_;
class deviceData;
class deviceDataDefaultTypeInternal;
extern deviceDataDefaultTypeInternal _deviceData_default_instance_;
class devicesDataRequest;
class devicesDataRequestDefaultTypeInternal;
extern devicesDataRequestDefaultTypeInternal _devicesDataRequest_default_instance_;
class devicesDataResponse;
class devicesDataResponseDefaultTypeInternal;
extern devicesDataResponseDefaultTypeInternal _devicesDataResponse_default_instance_;
class infoChannelRequest;
class infoChannelRequestDefaultTypeInternal;
extern infoChannelRequestDefaultTypeInternal _infoChannelRequest_default_instance_;
class setSourceFolderRequest;
class setSourceFolderRequestDefaultTypeInternal;
extern setSourceFolderRequestDefaultTypeInternal _setSourceFolderRequest_default_instance_;
class setSourceFolderResp;
class setSourceFolderRespDefaultTypeInternal;
extern setSourceFolderRespDefaultTypeInternal _setSourceFolderResp_default_instance_;
class sourceFileRequest;
class sourceFileRequestDefaultTypeInternal;
extern sourceFileRequestDefaultTypeInternal _sourceFileRequest_default_instance_;
class sourceFileResp;
class sourceFileRespDefaultTypeInternal;
extern sourceFileRespDefaultTypeInternal _sourceFileResp_default_instance_;
}  // namespace ImageService
namespace ImageService {

// ===================================================================

class ImgCntRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.ImgCntRequest) */ {
 public:
  ImgCntRequest();
  virtual ~ImgCntRequest();

  ImgCntRequest(const ImgCntRequest& from);

  inline ImgCntRequest& operator=(const ImgCntRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImgCntRequest(ImgCntRequest&& from) noexcept
    : ImgCntRequest() {
    *this = ::std::move(from);
  }

  inline ImgCntRequest& operator=(ImgCntRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImgCntRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImgCntRequest* internal_default_instance() {
    return reinterpret_cast<const ImgCntRequest*>(
               &_ImgCntRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ImgCntRequest* other);
  friend void swap(ImgCntRequest& a, ImgCntRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImgCntRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ImgCntRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImgCntRequest& from);
  void MergeFrom(const ImgCntRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImgCntRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 1;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // @@protoc_insertion_point(class_scope:ImageService.ImgCntRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsImgCntRequestImpl();
};
// -------------------------------------------------------------------

class ImgCntResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.ImgCntResponse) */ {
 public:
  ImgCntResponse();
  virtual ~ImgCntResponse();

  ImgCntResponse(const ImgCntResponse& from);

  inline ImgCntResponse& operator=(const ImgCntResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImgCntResponse(ImgCntResponse&& from) noexcept
    : ImgCntResponse() {
    *this = ::std::move(from);
  }

  inline ImgCntResponse& operator=(ImgCntResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImgCntResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImgCntResponse* internal_default_instance() {
    return reinterpret_cast<const ImgCntResponse*>(
               &_ImgCntResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ImgCntResponse* other);
  friend void swap(ImgCntResponse& a, ImgCntResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImgCntResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ImgCntResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImgCntResponse& from);
  void MergeFrom(const ImgCntResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImgCntResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 2;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // int32 total_frames = 1;
  void clear_total_frames();
  static const int kTotalFramesFieldNumber = 1;
  ::google::protobuf::int32 total_frames() const;
  void set_total_frames(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ImageService.ImgCntResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::int32 total_frames_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsImgCntResponseImpl();
};
// -------------------------------------------------------------------

class infoChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.infoChannelRequest) */ {
 public:
  infoChannelRequest();
  virtual ~infoChannelRequest();

  infoChannelRequest(const infoChannelRequest& from);

  inline infoChannelRequest& operator=(const infoChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  infoChannelRequest(infoChannelRequest&& from) noexcept
    : infoChannelRequest() {
    *this = ::std::move(from);
  }

  inline infoChannelRequest& operator=(infoChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const infoChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const infoChannelRequest* internal_default_instance() {
    return reinterpret_cast<const infoChannelRequest*>(
               &_infoChannelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(infoChannelRequest* other);
  friend void swap(infoChannelRequest& a, infoChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline infoChannelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  infoChannelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const infoChannelRequest& from);
  void MergeFrom(const infoChannelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(infoChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool required_channel_info = 1;
  void clear_required_channel_info();
  static const int kRequiredChannelInfoFieldNumber = 1;
  bool required_channel_info() const;
  void set_required_channel_info(bool value);

  // @@protoc_insertion_point(class_scope:ImageService.infoChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool required_channel_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsinfoChannelRequestImpl();
};
// -------------------------------------------------------------------

class deviceData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.deviceData) */ {
 public:
  deviceData();
  virtual ~deviceData();

  deviceData(const deviceData& from);

  inline deviceData& operator=(const deviceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  deviceData(deviceData&& from) noexcept
    : deviceData() {
    *this = ::std::move(from);
  }

  inline deviceData& operator=(deviceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const deviceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deviceData* internal_default_instance() {
    return reinterpret_cast<const deviceData*>(
               &_deviceData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(deviceData* other);
  friend void swap(deviceData& a, deviceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline deviceData* New() const PROTOBUF_FINAL { return New(NULL); }

  deviceData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const deviceData& from);
  void MergeFrom(const deviceData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(deviceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ImageService.channelInfo channel_Info = 2;
  int channel_info_size() const;
  void clear_channel_info();
  static const int kChannelInfoFieldNumber = 2;
  const ::ImageService::channelInfo& channel_info(int index) const;
  ::ImageService::channelInfo* mutable_channel_info(int index);
  ::ImageService::channelInfo* add_channel_info();
  ::google::protobuf::RepeatedPtrField< ::ImageService::channelInfo >*
      mutable_channel_info();
  const ::google::protobuf::RepeatedPtrField< ::ImageService::channelInfo >&
      channel_info() const;

  // string deviceName = 1;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 1;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  #if LANG_CXX11
  void set_devicename(::std::string&& value);
  #endif
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // int32 no_of_channels = 3;
  void clear_no_of_channels();
  static const int kNoOfChannelsFieldNumber = 3;
  ::google::protobuf::int32 no_of_channels() const;
  void set_no_of_channels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ImageService.deviceData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ImageService::channelInfo > channel_info_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::int32 no_of_channels_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsdeviceDataImpl();
};
// -------------------------------------------------------------------

class channelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.channelInfo) */ {
 public:
  channelInfo();
  virtual ~channelInfo();

  channelInfo(const channelInfo& from);

  inline channelInfo& operator=(const channelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  channelInfo(channelInfo&& from) noexcept
    : channelInfo() {
    *this = ::std::move(from);
  }

  inline channelInfo& operator=(channelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const channelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const channelInfo* internal_default_instance() {
    return reinterpret_cast<const channelInfo*>(
               &_channelInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(channelInfo* other);
  friend void swap(channelInfo& a, channelInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline channelInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  channelInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channelInfo& from);
  void MergeFrom(const channelInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 timestamp = 2;
  int timestamp_size() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp(int index) const;
  void set_timestamp(int index, ::google::protobuf::uint64 value);
  void add_timestamp(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      timestamp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_timestamp();

  // string channel_name = 1;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // @@protoc_insertion_point(class_scope:ImageService.channelInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > timestamp_;
  mutable int _timestamp_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultschannelInfoImpl();
};
// -------------------------------------------------------------------

class sourceFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.sourceFileRequest) */ {
 public:
  sourceFileRequest();
  virtual ~sourceFileRequest();

  sourceFileRequest(const sourceFileRequest& from);

  inline sourceFileRequest& operator=(const sourceFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sourceFileRequest(sourceFileRequest&& from) noexcept
    : sourceFileRequest() {
    *this = ::std::move(from);
  }

  inline sourceFileRequest& operator=(sourceFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sourceFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sourceFileRequest* internal_default_instance() {
    return reinterpret_cast<const sourceFileRequest*>(
               &_sourceFileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(sourceFileRequest* other);
  friend void swap(sourceFileRequest& a, sourceFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sourceFileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  sourceFileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sourceFileRequest& from);
  void MergeFrom(const sourceFileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sourceFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sourcefile_name = 1;
  void clear_sourcefile_name();
  static const int kSourcefileNameFieldNumber = 1;
  const ::std::string& sourcefile_name() const;
  void set_sourcefile_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcefile_name(::std::string&& value);
  #endif
  void set_sourcefile_name(const char* value);
  void set_sourcefile_name(const char* value, size_t size);
  ::std::string* mutable_sourcefile_name();
  ::std::string* release_sourcefile_name();
  void set_allocated_sourcefile_name(::std::string* sourcefile_name);

  // @@protoc_insertion_point(class_scope:ImageService.sourceFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sourcefile_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultssourceFileRequestImpl();
};
// -------------------------------------------------------------------

class sourceFileResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.sourceFileResp) */ {
 public:
  sourceFileResp();
  virtual ~sourceFileResp();

  sourceFileResp(const sourceFileResp& from);

  inline sourceFileResp& operator=(const sourceFileResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sourceFileResp(sourceFileResp&& from) noexcept
    : sourceFileResp() {
    *this = ::std::move(from);
  }

  inline sourceFileResp& operator=(sourceFileResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const sourceFileResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sourceFileResp* internal_default_instance() {
    return reinterpret_cast<const sourceFileResp*>(
               &_sourceFileResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(sourceFileResp* other);
  friend void swap(sourceFileResp& a, sourceFileResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sourceFileResp* New() const PROTOBUF_FINAL { return New(NULL); }

  sourceFileResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sourceFileResp& from);
  void MergeFrom(const sourceFileResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sourceFileResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sourcefile_name = 1;
  void clear_sourcefile_name();
  static const int kSourcefileNameFieldNumber = 1;
  const ::std::string& sourcefile_name() const;
  void set_sourcefile_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcefile_name(::std::string&& value);
  #endif
  void set_sourcefile_name(const char* value);
  void set_sourcefile_name(const char* value, size_t size);
  ::std::string* mutable_sourcefile_name();
  ::std::string* release_sourcefile_name();
  void set_allocated_sourcefile_name(::std::string* sourcefile_name);

  // @@protoc_insertion_point(class_scope:ImageService.sourceFileResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sourcefile_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultssourceFileRespImpl();
};
// -------------------------------------------------------------------

class setSourceFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.setSourceFolderRequest) */ {
 public:
  setSourceFolderRequest();
  virtual ~setSourceFolderRequest();

  setSourceFolderRequest(const setSourceFolderRequest& from);

  inline setSourceFolderRequest& operator=(const setSourceFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  setSourceFolderRequest(setSourceFolderRequest&& from) noexcept
    : setSourceFolderRequest() {
    *this = ::std::move(from);
  }

  inline setSourceFolderRequest& operator=(setSourceFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const setSourceFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const setSourceFolderRequest* internal_default_instance() {
    return reinterpret_cast<const setSourceFolderRequest*>(
               &_setSourceFolderRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(setSourceFolderRequest* other);
  friend void swap(setSourceFolderRequest& a, setSourceFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline setSourceFolderRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  setSourceFolderRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const setSourceFolderRequest& from);
  void MergeFrom(const setSourceFolderRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(setSourceFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sourcefolder_name = 1;
  void clear_sourcefolder_name();
  static const int kSourcefolderNameFieldNumber = 1;
  const ::std::string& sourcefolder_name() const;
  void set_sourcefolder_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcefolder_name(::std::string&& value);
  #endif
  void set_sourcefolder_name(const char* value);
  void set_sourcefolder_name(const char* value, size_t size);
  ::std::string* mutable_sourcefolder_name();
  ::std::string* release_sourcefolder_name();
  void set_allocated_sourcefolder_name(::std::string* sourcefolder_name);

  // @@protoc_insertion_point(class_scope:ImageService.setSourceFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sourcefolder_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultssetSourceFolderRequestImpl();
};
// -------------------------------------------------------------------

class setSourceFolderResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.setSourceFolderResp) */ {
 public:
  setSourceFolderResp();
  virtual ~setSourceFolderResp();

  setSourceFolderResp(const setSourceFolderResp& from);

  inline setSourceFolderResp& operator=(const setSourceFolderResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  setSourceFolderResp(setSourceFolderResp&& from) noexcept
    : setSourceFolderResp() {
    *this = ::std::move(from);
  }

  inline setSourceFolderResp& operator=(setSourceFolderResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const setSourceFolderResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const setSourceFolderResp* internal_default_instance() {
    return reinterpret_cast<const setSourceFolderResp*>(
               &_setSourceFolderResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(setSourceFolderResp* other);
  friend void swap(setSourceFolderResp& a, setSourceFolderResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline setSourceFolderResp* New() const PROTOBUF_FINAL { return New(NULL); }

  setSourceFolderResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const setSourceFolderResp& from);
  void MergeFrom(const setSourceFolderResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(setSourceFolderResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sourcefolder_name = 1;
  void clear_sourcefolder_name();
  static const int kSourcefolderNameFieldNumber = 1;
  const ::std::string& sourcefolder_name() const;
  void set_sourcefolder_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcefolder_name(::std::string&& value);
  #endif
  void set_sourcefolder_name(const char* value);
  void set_sourcefolder_name(const char* value, size_t size);
  ::std::string* mutable_sourcefolder_name();
  ::std::string* release_sourcefolder_name();
  void set_allocated_sourcefolder_name(::std::string* sourcefolder_name);

  // @@protoc_insertion_point(class_scope:ImageService.setSourceFolderResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sourcefolder_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultssetSourceFolderRespImpl();
};
// -------------------------------------------------------------------

class devicesDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.devicesDataRequest) */ {
 public:
  devicesDataRequest();
  virtual ~devicesDataRequest();

  devicesDataRequest(const devicesDataRequest& from);

  inline devicesDataRequest& operator=(const devicesDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  devicesDataRequest(devicesDataRequest&& from) noexcept
    : devicesDataRequest() {
    *this = ::std::move(from);
  }

  inline devicesDataRequest& operator=(devicesDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const devicesDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const devicesDataRequest* internal_default_instance() {
    return reinterpret_cast<const devicesDataRequest*>(
               &_devicesDataRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(devicesDataRequest* other);
  friend void swap(devicesDataRequest& a, devicesDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline devicesDataRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  devicesDataRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const devicesDataRequest& from);
  void MergeFrom(const devicesDataRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(devicesDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool required_devicesData = 1;
  void clear_required_devicesdata();
  static const int kRequiredDevicesDataFieldNumber = 1;
  bool required_devicesdata() const;
  void set_required_devicesdata(bool value);

  // @@protoc_insertion_point(class_scope:ImageService.devicesDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool required_devicesdata_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsdevicesDataRequestImpl();
};
// -------------------------------------------------------------------

class devicesDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.devicesDataResponse) */ {
 public:
  devicesDataResponse();
  virtual ~devicesDataResponse();

  devicesDataResponse(const devicesDataResponse& from);

  inline devicesDataResponse& operator=(const devicesDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  devicesDataResponse(devicesDataResponse&& from) noexcept
    : devicesDataResponse() {
    *this = ::std::move(from);
  }

  inline devicesDataResponse& operator=(devicesDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const devicesDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const devicesDataResponse* internal_default_instance() {
    return reinterpret_cast<const devicesDataResponse*>(
               &_devicesDataResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(devicesDataResponse* other);
  friend void swap(devicesDataResponse& a, devicesDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline devicesDataResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  devicesDataResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const devicesDataResponse& from);
  void MergeFrom(const devicesDataResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(devicesDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ImageService.deviceData devicedata = 1;
  int devicedata_size() const;
  void clear_devicedata();
  static const int kDevicedataFieldNumber = 1;
  const ::ImageService::deviceData& devicedata(int index) const;
  ::ImageService::deviceData* mutable_devicedata(int index);
  ::ImageService::deviceData* add_devicedata();
  ::google::protobuf::RepeatedPtrField< ::ImageService::deviceData >*
      mutable_devicedata();
  const ::google::protobuf::RepeatedPtrField< ::ImageService::deviceData >&
      devicedata() const;

  // int32 deviceCount = 2;
  void clear_devicecount();
  static const int kDeviceCountFieldNumber = 2;
  ::google::protobuf::int32 devicecount() const;
  void set_devicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ImageService.devicesDataResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ImageService::deviceData > devicedata_;
  ::google::protobuf::int32 devicecount_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsdevicesDataResponseImpl();
};
// -------------------------------------------------------------------

class PixelImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.PixelImageData) */ {
 public:
  PixelImageData();
  virtual ~PixelImageData();

  PixelImageData(const PixelImageData& from);

  inline PixelImageData& operator=(const PixelImageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PixelImageData(PixelImageData&& from) noexcept
    : PixelImageData() {
    *this = ::std::move(from);
  }

  inline PixelImageData& operator=(PixelImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PixelImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PixelImageData* internal_default_instance() {
    return reinterpret_cast<const PixelImageData*>(
               &_PixelImageData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(PixelImageData* other);
  friend void swap(PixelImageData& a, PixelImageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PixelImageData* New() const PROTOBUF_FINAL { return New(NULL); }

  PixelImageData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PixelImageData& from);
  void MergeFrom(const PixelImageData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PixelImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string format = 2;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint64 width() const;
  void set_width(::google::protobuf::uint64 value);

  // uint64 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ImageService.PixelImageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 width_;
  ::google::protobuf::uint64 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsPixelImageDataImpl();
};
// -------------------------------------------------------------------

class ImageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.ImageRequest) */ {
 public:
  ImageRequest();
  virtual ~ImageRequest();

  ImageRequest(const ImageRequest& from);

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRequest(ImageRequest&& from) noexcept
    : ImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRequest& operator=(ImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRequest*>(
               &_ImageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ImageRequest* other);
  friend void swap(ImageRequest& a, ImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageRequest& from);
  void MergeFrom(const ImageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string image_name = 4;
  int image_name_size() const;
  void clear_image_name();
  static const int kImageNameFieldNumber = 4;
  const ::std::string& image_name(int index) const;
  ::std::string* mutable_image_name(int index);
  void set_image_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_image_name(int index, ::std::string&& value);
  #endif
  void set_image_name(int index, const char* value);
  void set_image_name(int index, const char* value, size_t size);
  ::std::string* add_image_name();
  void add_image_name(const ::std::string& value);
  #if LANG_CXX11
  void add_image_name(::std::string&& value);
  #endif
  void add_image_name(const char* value);
  void add_image_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_name();

  // string request_channel_name = 2;
  void clear_request_channel_name();
  static const int kRequestChannelNameFieldNumber = 2;
  const ::std::string& request_channel_name() const;
  void set_request_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_request_channel_name(::std::string&& value);
  #endif
  void set_request_channel_name(const char* value);
  void set_request_channel_name(const char* value, size_t size);
  ::std::string* mutable_request_channel_name();
  ::std::string* release_request_channel_name();
  void set_allocated_request_channel_name(::std::string* request_channel_name);

  // string request_device_name = 3;
  void clear_request_device_name();
  static const int kRequestDeviceNameFieldNumber = 3;
  const ::std::string& request_device_name() const;
  void set_request_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_request_device_name(::std::string&& value);
  #endif
  void set_request_device_name(const char* value);
  void set_request_device_name(const char* value, size_t size);
  ::std::string* mutable_request_device_name();
  ::std::string* release_request_device_name();
  void set_allocated_request_device_name(::std::string* request_device_name);

  // uint64 required_timestamp = 1;
  void clear_required_timestamp();
  static const int kRequiredTimestampFieldNumber = 1;
  ::google::protobuf::uint64 required_timestamp() const;
  void set_required_timestamp(::google::protobuf::uint64 value);

  // uint64 image_index = 5;
  void clear_image_index();
  static const int kImageIndexFieldNumber = 5;
  ::google::protobuf::uint64 image_index() const;
  void set_image_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ImageService.ImageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_name_;
  ::google::protobuf::internal::ArenaStringPtr request_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr request_device_name_;
  ::google::protobuf::uint64 required_timestamp_;
  ::google::protobuf::uint64 image_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsImageRequestImpl();
};
// -------------------------------------------------------------------

class ImageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.ImageResponse) */ {
 public:
  ImageResponse();
  virtual ~ImageResponse();

  ImageResponse(const ImageResponse& from);

  inline ImageResponse& operator=(const ImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageResponse(ImageResponse&& from) noexcept
    : ImageResponse() {
    *this = ::std::move(from);
  }

  inline ImageResponse& operator=(ImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageResponse* internal_default_instance() {
    return reinterpret_cast<const ImageResponse*>(
               &_ImageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ImageResponse* other);
  friend void swap(ImageResponse& a, ImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageResponse& from);
  void MergeFrom(const ImageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ImageService.PixelImageData image_bytes = 5;
  int image_bytes_size() const;
  void clear_image_bytes();
  static const int kImageBytesFieldNumber = 5;
  const ::ImageService::PixelImageData& image_bytes(int index) const;
  ::ImageService::PixelImageData* mutable_image_bytes(int index);
  ::ImageService::PixelImageData* add_image_bytes();
  ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >*
      mutable_image_bytes();
  const ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >&
      image_bytes() const;

  // string response_channel_name = 2;
  void clear_response_channel_name();
  static const int kResponseChannelNameFieldNumber = 2;
  const ::std::string& response_channel_name() const;
  void set_response_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_response_channel_name(::std::string&& value);
  #endif
  void set_response_channel_name(const char* value);
  void set_response_channel_name(const char* value, size_t size);
  ::std::string* mutable_response_channel_name();
  ::std::string* release_response_channel_name();
  void set_allocated_response_channel_name(::std::string* response_channel_name);

  // string base_image_name = 3;
  void clear_base_image_name();
  static const int kBaseImageNameFieldNumber = 3;
  const ::std::string& base_image_name() const;
  void set_base_image_name(const ::std::string& value);
  #if LANG_CXX11
  void set_base_image_name(::std::string&& value);
  #endif
  void set_base_image_name(const char* value);
  void set_base_image_name(const char* value, size_t size);
  ::std::string* mutable_base_image_name();
  ::std::string* release_base_image_name();
  void set_allocated_base_image_name(::std::string* base_image_name);

  // bytes base_image = 4;
  void clear_base_image();
  static const int kBaseImageFieldNumber = 4;
  const ::std::string& base_image() const;
  void set_base_image(const ::std::string& value);
  #if LANG_CXX11
  void set_base_image(::std::string&& value);
  #endif
  void set_base_image(const char* value);
  void set_base_image(const void* value, size_t size);
  ::std::string* mutable_base_image();
  ::std::string* release_base_image();
  void set_allocated_base_image(::std::string* base_image);

  // string response_device_name = 6;
  void clear_response_device_name();
  static const int kResponseDeviceNameFieldNumber = 6;
  const ::std::string& response_device_name() const;
  void set_response_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_response_device_name(::std::string&& value);
  #endif
  void set_response_device_name(const char* value);
  void set_response_device_name(const char* value, size_t size);
  ::std::string* mutable_response_device_name();
  ::std::string* release_response_device_name();
  void set_allocated_response_device_name(::std::string* response_device_name);

  // uint64 recieved_timestamp = 1;
  void clear_recieved_timestamp();
  static const int kRecievedTimestampFieldNumber = 1;
  ::google::protobuf::uint64 recieved_timestamp() const;
  void set_recieved_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ImageService.ImageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData > image_bytes_;
  ::google::protobuf::internal::ArenaStringPtr response_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr base_image_name_;
  ::google::protobuf::internal::ArenaStringPtr base_image_;
  ::google::protobuf::internal::ArenaStringPtr response_device_name_;
  ::google::protobuf::uint64 recieved_timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsImageResponseImpl();
};
// -------------------------------------------------------------------

class ImageDeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.ImageDeleteRequest) */ {
 public:
  ImageDeleteRequest();
  virtual ~ImageDeleteRequest();

  ImageDeleteRequest(const ImageDeleteRequest& from);

  inline ImageDeleteRequest& operator=(const ImageDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageDeleteRequest(ImageDeleteRequest&& from) noexcept
    : ImageDeleteRequest() {
    *this = ::std::move(from);
  }

  inline ImageDeleteRequest& operator=(ImageDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const ImageDeleteRequest*>(
               &_ImageDeleteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ImageDeleteRequest* other);
  friend void swap(ImageDeleteRequest& a, ImageDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageDeleteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageDeleteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageDeleteRequest& from);
  void MergeFrom(const ImageDeleteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string image_name = 3;
  int image_name_size() const;
  void clear_image_name();
  static const int kImageNameFieldNumber = 3;
  const ::std::string& image_name(int index) const;
  ::std::string* mutable_image_name(int index);
  void set_image_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_image_name(int index, ::std::string&& value);
  #endif
  void set_image_name(int index, const char* value);
  void set_image_name(int index, const char* value, size_t size);
  ::std::string* add_image_name();
  void add_image_name(const ::std::string& value);
  #if LANG_CXX11
  void add_image_name(::std::string&& value);
  #endif
  void add_image_name(const char* value);
  void add_image_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_name();

  // string request_channel_name = 2;
  void clear_request_channel_name();
  static const int kRequestChannelNameFieldNumber = 2;
  const ::std::string& request_channel_name() const;
  void set_request_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_request_channel_name(::std::string&& value);
  #endif
  void set_request_channel_name(const char* value);
  void set_request_channel_name(const char* value, size_t size);
  ::std::string* mutable_request_channel_name();
  ::std::string* release_request_channel_name();
  void set_allocated_request_channel_name(::std::string* request_channel_name);

  // uint64 required_timestamp = 1;
  void clear_required_timestamp();
  static const int kRequiredTimestampFieldNumber = 1;
  ::google::protobuf::uint64 required_timestamp() const;
  void set_required_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ImageService.ImageDeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_name_;
  ::google::protobuf::internal::ArenaStringPtr request_channel_name_;
  ::google::protobuf::uint64 required_timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsImageDeleteRequestImpl();
};
// -------------------------------------------------------------------

class PixelLabelWriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.PixelLabelWriteRequest) */ {
 public:
  PixelLabelWriteRequest();
  virtual ~PixelLabelWriteRequest();

  PixelLabelWriteRequest(const PixelLabelWriteRequest& from);

  inline PixelLabelWriteRequest& operator=(const PixelLabelWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PixelLabelWriteRequest(PixelLabelWriteRequest&& from) noexcept
    : PixelLabelWriteRequest() {
    *this = ::std::move(from);
  }

  inline PixelLabelWriteRequest& operator=(PixelLabelWriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PixelLabelWriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PixelLabelWriteRequest* internal_default_instance() {
    return reinterpret_cast<const PixelLabelWriteRequest*>(
               &_PixelLabelWriteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(PixelLabelWriteRequest* other);
  friend void swap(PixelLabelWriteRequest& a, PixelLabelWriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PixelLabelWriteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PixelLabelWriteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PixelLabelWriteRequest& from);
  void MergeFrom(const PixelLabelWriteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PixelLabelWriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ImageService.PixelImageData image = 3;
  int image_size() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::ImageService::PixelImageData& image(int index) const;
  ::ImageService::PixelImageData* mutable_image(int index);
  ::ImageService::PixelImageData* add_image();
  ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >*
      mutable_image();
  const ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >&
      image() const;

  // string response_channel_name = 2;
  void clear_response_channel_name();
  static const int kResponseChannelNameFieldNumber = 2;
  const ::std::string& response_channel_name() const;
  void set_response_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_response_channel_name(::std::string&& value);
  #endif
  void set_response_channel_name(const char* value);
  void set_response_channel_name(const char* value, size_t size);
  ::std::string* mutable_response_channel_name();
  ::std::string* release_response_channel_name();
  void set_allocated_response_channel_name(::std::string* response_channel_name);

  // uint64 recieved_timestamp = 1;
  void clear_recieved_timestamp();
  static const int kRecievedTimestampFieldNumber = 1;
  ::google::protobuf::uint64 recieved_timestamp() const;
  void set_recieved_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ImageService.PixelLabelWriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData > image_;
  ::google::protobuf::internal::ArenaStringPtr response_channel_name_;
  ::google::protobuf::uint64 recieved_timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsPixelLabelWriteRequestImpl();
};
// -------------------------------------------------------------------

class PixelLabelWriteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.PixelLabelWriteResponse) */ {
 public:
  PixelLabelWriteResponse();
  virtual ~PixelLabelWriteResponse();

  PixelLabelWriteResponse(const PixelLabelWriteResponse& from);

  inline PixelLabelWriteResponse& operator=(const PixelLabelWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PixelLabelWriteResponse(PixelLabelWriteResponse&& from) noexcept
    : PixelLabelWriteResponse() {
    *this = ::std::move(from);
  }

  inline PixelLabelWriteResponse& operator=(PixelLabelWriteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PixelLabelWriteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PixelLabelWriteResponse* internal_default_instance() {
    return reinterpret_cast<const PixelLabelWriteResponse*>(
               &_PixelLabelWriteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(PixelLabelWriteResponse* other);
  friend void swap(PixelLabelWriteResponse& a, PixelLabelWriteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PixelLabelWriteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PixelLabelWriteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PixelLabelWriteResponse& from);
  void MergeFrom(const PixelLabelWriteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PixelLabelWriteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:ImageService.PixelLabelWriteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsPixelLabelWriteResponseImpl();
};
// -------------------------------------------------------------------

class HFLResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageService.HFLResponse) */ {
 public:
  HFLResponse();
  virtual ~HFLResponse();

  HFLResponse(const HFLResponse& from);

  inline HFLResponse& operator=(const HFLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HFLResponse(HFLResponse&& from) noexcept
    : HFLResponse() {
    *this = ::std::move(from);
  }

  inline HFLResponse& operator=(HFLResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HFLResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HFLResponse* internal_default_instance() {
    return reinterpret_cast<const HFLResponse*>(
               &_HFLResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(HFLResponse* other);
  friend void swap(HFLResponse& a, HFLResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HFLResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HFLResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HFLResponse& from);
  void MergeFrom(const HFLResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HFLResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes intensity_image = 2;
  void clear_intensity_image();
  static const int kIntensityImageFieldNumber = 2;
  const ::std::string& intensity_image() const;
  void set_intensity_image(const ::std::string& value);
  #if LANG_CXX11
  void set_intensity_image(::std::string&& value);
  #endif
  void set_intensity_image(const char* value);
  void set_intensity_image(const void* value, size_t size);
  ::std::string* mutable_intensity_image();
  ::std::string* release_intensity_image();
  void set_allocated_intensity_image(::std::string* intensity_image);

  // bytes distance_image = 3;
  void clear_distance_image();
  static const int kDistanceImageFieldNumber = 3;
  const ::std::string& distance_image() const;
  void set_distance_image(const ::std::string& value);
  #if LANG_CXX11
  void set_distance_image(::std::string&& value);
  #endif
  void set_distance_image(const char* value);
  void set_distance_image(const void* value, size_t size);
  ::std::string* mutable_distance_image();
  ::std::string* release_distance_image();
  void set_allocated_distance_image(::std::string* distance_image);

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint64 HFL_image_index = 4;
  void clear_hfl_image_index();
  static const int kHFLImageIndexFieldNumber = 4;
  ::google::protobuf::uint64 hfl_image_index() const;
  void set_hfl_image_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ImageService.HFLResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr intensity_image_;
  ::google::protobuf::internal::ArenaStringPtr distance_image_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 hfl_image_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_imageservice_2eproto::TableStruct;
  friend void ::protobuf_imageservice_2eproto::InitDefaultsHFLResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImgCntRequest

// string channel_name = 1;
inline void ImgCntRequest::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImgCntRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImgCntRequest.channel_name)
  return channel_name_.GetNoArena();
}
inline void ImgCntRequest::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImgCntRequest.channel_name)
}
#if LANG_CXX11
inline void ImgCntRequest::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImgCntRequest.channel_name)
}
#endif
inline void ImgCntRequest::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImgCntRequest.channel_name)
}
inline void ImgCntRequest::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImgCntRequest.channel_name)
}
inline ::std::string* ImgCntRequest::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImgCntRequest.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImgCntRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImgCntRequest.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImgCntRequest::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImgCntRequest.channel_name)
}

// -------------------------------------------------------------------

// ImgCntResponse

// int32 total_frames = 1;
inline void ImgCntResponse::clear_total_frames() {
  total_frames_ = 0;
}
inline ::google::protobuf::int32 ImgCntResponse::total_frames() const {
  // @@protoc_insertion_point(field_get:ImageService.ImgCntResponse.total_frames)
  return total_frames_;
}
inline void ImgCntResponse::set_total_frames(::google::protobuf::int32 value) {
  
  total_frames_ = value;
  // @@protoc_insertion_point(field_set:ImageService.ImgCntResponse.total_frames)
}

// string channel_name = 2;
inline void ImgCntResponse::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImgCntResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImgCntResponse.channel_name)
  return channel_name_.GetNoArena();
}
inline void ImgCntResponse::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImgCntResponse.channel_name)
}
#if LANG_CXX11
inline void ImgCntResponse::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImgCntResponse.channel_name)
}
#endif
inline void ImgCntResponse::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImgCntResponse.channel_name)
}
inline void ImgCntResponse::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImgCntResponse.channel_name)
}
inline ::std::string* ImgCntResponse::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImgCntResponse.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImgCntResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImgCntResponse.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImgCntResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImgCntResponse.channel_name)
}

// -------------------------------------------------------------------

// infoChannelRequest

// bool required_channel_info = 1;
inline void infoChannelRequest::clear_required_channel_info() {
  required_channel_info_ = false;
}
inline bool infoChannelRequest::required_channel_info() const {
  // @@protoc_insertion_point(field_get:ImageService.infoChannelRequest.required_channel_info)
  return required_channel_info_;
}
inline void infoChannelRequest::set_required_channel_info(bool value) {
  
  required_channel_info_ = value;
  // @@protoc_insertion_point(field_set:ImageService.infoChannelRequest.required_channel_info)
}

// -------------------------------------------------------------------

// deviceData

// string deviceName = 1;
inline void deviceData::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& deviceData::devicename() const {
  // @@protoc_insertion_point(field_get:ImageService.deviceData.deviceName)
  return devicename_.GetNoArena();
}
inline void deviceData::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.deviceData.deviceName)
}
#if LANG_CXX11
inline void deviceData::set_devicename(::std::string&& value) {
  
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.deviceData.deviceName)
}
#endif
inline void deviceData::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.deviceData.deviceName)
}
inline void deviceData::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.deviceData.deviceName)
}
inline ::std::string* deviceData::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.deviceData.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* deviceData::release_devicename() {
  // @@protoc_insertion_point(field_release:ImageService.deviceData.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void deviceData::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:ImageService.deviceData.deviceName)
}

// repeated .ImageService.channelInfo channel_Info = 2;
inline int deviceData::channel_info_size() const {
  return channel_info_.size();
}
inline void deviceData::clear_channel_info() {
  channel_info_.Clear();
}
inline const ::ImageService::channelInfo& deviceData::channel_info(int index) const {
  // @@protoc_insertion_point(field_get:ImageService.deviceData.channel_Info)
  return channel_info_.Get(index);
}
inline ::ImageService::channelInfo* deviceData::mutable_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:ImageService.deviceData.channel_Info)
  return channel_info_.Mutable(index);
}
inline ::ImageService::channelInfo* deviceData::add_channel_info() {
  // @@protoc_insertion_point(field_add:ImageService.deviceData.channel_Info)
  return channel_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ImageService::channelInfo >*
deviceData::mutable_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:ImageService.deviceData.channel_Info)
  return &channel_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ImageService::channelInfo >&
deviceData::channel_info() const {
  // @@protoc_insertion_point(field_list:ImageService.deviceData.channel_Info)
  return channel_info_;
}

// int32 no_of_channels = 3;
inline void deviceData::clear_no_of_channels() {
  no_of_channels_ = 0;
}
inline ::google::protobuf::int32 deviceData::no_of_channels() const {
  // @@protoc_insertion_point(field_get:ImageService.deviceData.no_of_channels)
  return no_of_channels_;
}
inline void deviceData::set_no_of_channels(::google::protobuf::int32 value) {
  
  no_of_channels_ = value;
  // @@protoc_insertion_point(field_set:ImageService.deviceData.no_of_channels)
}

// -------------------------------------------------------------------

// channelInfo

// string channel_name = 1;
inline void channelInfo::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channelInfo::channel_name() const {
  // @@protoc_insertion_point(field_get:ImageService.channelInfo.channel_name)
  return channel_name_.GetNoArena();
}
inline void channelInfo::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.channelInfo.channel_name)
}
#if LANG_CXX11
inline void channelInfo::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.channelInfo.channel_name)
}
#endif
inline void channelInfo::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.channelInfo.channel_name)
}
inline void channelInfo::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.channelInfo.channel_name)
}
inline ::std::string* channelInfo::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.channelInfo.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channelInfo::release_channel_name() {
  // @@protoc_insertion_point(field_release:ImageService.channelInfo.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channelInfo::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.channelInfo.channel_name)
}

// repeated uint64 timestamp = 2;
inline int channelInfo::timestamp_size() const {
  return timestamp_.size();
}
inline void channelInfo::clear_timestamp() {
  timestamp_.Clear();
}
inline ::google::protobuf::uint64 channelInfo::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:ImageService.channelInfo.timestamp)
  return timestamp_.Get(index);
}
inline void channelInfo::set_timestamp(int index, ::google::protobuf::uint64 value) {
  timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImageService.channelInfo.timestamp)
}
inline void channelInfo::add_timestamp(::google::protobuf::uint64 value) {
  timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:ImageService.channelInfo.timestamp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
channelInfo::timestamp() const {
  // @@protoc_insertion_point(field_list:ImageService.channelInfo.timestamp)
  return timestamp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
channelInfo::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:ImageService.channelInfo.timestamp)
  return &timestamp_;
}

// -------------------------------------------------------------------

// sourceFileRequest

// string sourcefile_name = 1;
inline void sourceFileRequest::clear_sourcefile_name() {
  sourcefile_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sourceFileRequest::sourcefile_name() const {
  // @@protoc_insertion_point(field_get:ImageService.sourceFileRequest.sourcefile_name)
  return sourcefile_name_.GetNoArena();
}
inline void sourceFileRequest::set_sourcefile_name(const ::std::string& value) {
  
  sourcefile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.sourceFileRequest.sourcefile_name)
}
#if LANG_CXX11
inline void sourceFileRequest::set_sourcefile_name(::std::string&& value) {
  
  sourcefile_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.sourceFileRequest.sourcefile_name)
}
#endif
inline void sourceFileRequest::set_sourcefile_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcefile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.sourceFileRequest.sourcefile_name)
}
inline void sourceFileRequest::set_sourcefile_name(const char* value, size_t size) {
  
  sourcefile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.sourceFileRequest.sourcefile_name)
}
inline ::std::string* sourceFileRequest::mutable_sourcefile_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.sourceFileRequest.sourcefile_name)
  return sourcefile_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sourceFileRequest::release_sourcefile_name() {
  // @@protoc_insertion_point(field_release:ImageService.sourceFileRequest.sourcefile_name)
  
  return sourcefile_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sourceFileRequest::set_allocated_sourcefile_name(::std::string* sourcefile_name) {
  if (sourcefile_name != NULL) {
    
  } else {
    
  }
  sourcefile_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcefile_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.sourceFileRequest.sourcefile_name)
}

// -------------------------------------------------------------------

// sourceFileResp

// string sourcefile_name = 1;
inline void sourceFileResp::clear_sourcefile_name() {
  sourcefile_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sourceFileResp::sourcefile_name() const {
  // @@protoc_insertion_point(field_get:ImageService.sourceFileResp.sourcefile_name)
  return sourcefile_name_.GetNoArena();
}
inline void sourceFileResp::set_sourcefile_name(const ::std::string& value) {
  
  sourcefile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.sourceFileResp.sourcefile_name)
}
#if LANG_CXX11
inline void sourceFileResp::set_sourcefile_name(::std::string&& value) {
  
  sourcefile_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.sourceFileResp.sourcefile_name)
}
#endif
inline void sourceFileResp::set_sourcefile_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcefile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.sourceFileResp.sourcefile_name)
}
inline void sourceFileResp::set_sourcefile_name(const char* value, size_t size) {
  
  sourcefile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.sourceFileResp.sourcefile_name)
}
inline ::std::string* sourceFileResp::mutable_sourcefile_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.sourceFileResp.sourcefile_name)
  return sourcefile_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sourceFileResp::release_sourcefile_name() {
  // @@protoc_insertion_point(field_release:ImageService.sourceFileResp.sourcefile_name)
  
  return sourcefile_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sourceFileResp::set_allocated_sourcefile_name(::std::string* sourcefile_name) {
  if (sourcefile_name != NULL) {
    
  } else {
    
  }
  sourcefile_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcefile_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.sourceFileResp.sourcefile_name)
}

// -------------------------------------------------------------------

// setSourceFolderRequest

// string sourcefolder_name = 1;
inline void setSourceFolderRequest::clear_sourcefolder_name() {
  sourcefolder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& setSourceFolderRequest::sourcefolder_name() const {
  // @@protoc_insertion_point(field_get:ImageService.setSourceFolderRequest.sourcefolder_name)
  return sourcefolder_name_.GetNoArena();
}
inline void setSourceFolderRequest::set_sourcefolder_name(const ::std::string& value) {
  
  sourcefolder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.setSourceFolderRequest.sourcefolder_name)
}
#if LANG_CXX11
inline void setSourceFolderRequest::set_sourcefolder_name(::std::string&& value) {
  
  sourcefolder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.setSourceFolderRequest.sourcefolder_name)
}
#endif
inline void setSourceFolderRequest::set_sourcefolder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcefolder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.setSourceFolderRequest.sourcefolder_name)
}
inline void setSourceFolderRequest::set_sourcefolder_name(const char* value, size_t size) {
  
  sourcefolder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.setSourceFolderRequest.sourcefolder_name)
}
inline ::std::string* setSourceFolderRequest::mutable_sourcefolder_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.setSourceFolderRequest.sourcefolder_name)
  return sourcefolder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* setSourceFolderRequest::release_sourcefolder_name() {
  // @@protoc_insertion_point(field_release:ImageService.setSourceFolderRequest.sourcefolder_name)
  
  return sourcefolder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void setSourceFolderRequest::set_allocated_sourcefolder_name(::std::string* sourcefolder_name) {
  if (sourcefolder_name != NULL) {
    
  } else {
    
  }
  sourcefolder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcefolder_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.setSourceFolderRequest.sourcefolder_name)
}

// -------------------------------------------------------------------

// setSourceFolderResp

// string sourcefolder_name = 1;
inline void setSourceFolderResp::clear_sourcefolder_name() {
  sourcefolder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& setSourceFolderResp::sourcefolder_name() const {
  // @@protoc_insertion_point(field_get:ImageService.setSourceFolderResp.sourcefolder_name)
  return sourcefolder_name_.GetNoArena();
}
inline void setSourceFolderResp::set_sourcefolder_name(const ::std::string& value) {
  
  sourcefolder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.setSourceFolderResp.sourcefolder_name)
}
#if LANG_CXX11
inline void setSourceFolderResp::set_sourcefolder_name(::std::string&& value) {
  
  sourcefolder_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.setSourceFolderResp.sourcefolder_name)
}
#endif
inline void setSourceFolderResp::set_sourcefolder_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcefolder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.setSourceFolderResp.sourcefolder_name)
}
inline void setSourceFolderResp::set_sourcefolder_name(const char* value, size_t size) {
  
  sourcefolder_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.setSourceFolderResp.sourcefolder_name)
}
inline ::std::string* setSourceFolderResp::mutable_sourcefolder_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.setSourceFolderResp.sourcefolder_name)
  return sourcefolder_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* setSourceFolderResp::release_sourcefolder_name() {
  // @@protoc_insertion_point(field_release:ImageService.setSourceFolderResp.sourcefolder_name)
  
  return sourcefolder_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void setSourceFolderResp::set_allocated_sourcefolder_name(::std::string* sourcefolder_name) {
  if (sourcefolder_name != NULL) {
    
  } else {
    
  }
  sourcefolder_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcefolder_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.setSourceFolderResp.sourcefolder_name)
}

// -------------------------------------------------------------------

// devicesDataRequest

// bool required_devicesData = 1;
inline void devicesDataRequest::clear_required_devicesdata() {
  required_devicesdata_ = false;
}
inline bool devicesDataRequest::required_devicesdata() const {
  // @@protoc_insertion_point(field_get:ImageService.devicesDataRequest.required_devicesData)
  return required_devicesdata_;
}
inline void devicesDataRequest::set_required_devicesdata(bool value) {
  
  required_devicesdata_ = value;
  // @@protoc_insertion_point(field_set:ImageService.devicesDataRequest.required_devicesData)
}

// -------------------------------------------------------------------

// devicesDataResponse

// repeated .ImageService.deviceData devicedata = 1;
inline int devicesDataResponse::devicedata_size() const {
  return devicedata_.size();
}
inline void devicesDataResponse::clear_devicedata() {
  devicedata_.Clear();
}
inline const ::ImageService::deviceData& devicesDataResponse::devicedata(int index) const {
  // @@protoc_insertion_point(field_get:ImageService.devicesDataResponse.devicedata)
  return devicedata_.Get(index);
}
inline ::ImageService::deviceData* devicesDataResponse::mutable_devicedata(int index) {
  // @@protoc_insertion_point(field_mutable:ImageService.devicesDataResponse.devicedata)
  return devicedata_.Mutable(index);
}
inline ::ImageService::deviceData* devicesDataResponse::add_devicedata() {
  // @@protoc_insertion_point(field_add:ImageService.devicesDataResponse.devicedata)
  return devicedata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ImageService::deviceData >*
devicesDataResponse::mutable_devicedata() {
  // @@protoc_insertion_point(field_mutable_list:ImageService.devicesDataResponse.devicedata)
  return &devicedata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ImageService::deviceData >&
devicesDataResponse::devicedata() const {
  // @@protoc_insertion_point(field_list:ImageService.devicesDataResponse.devicedata)
  return devicedata_;
}

// int32 deviceCount = 2;
inline void devicesDataResponse::clear_devicecount() {
  devicecount_ = 0;
}
inline ::google::protobuf::int32 devicesDataResponse::devicecount() const {
  // @@protoc_insertion_point(field_get:ImageService.devicesDataResponse.deviceCount)
  return devicecount_;
}
inline void devicesDataResponse::set_devicecount(::google::protobuf::int32 value) {
  
  devicecount_ = value;
  // @@protoc_insertion_point(field_set:ImageService.devicesDataResponse.deviceCount)
}

// -------------------------------------------------------------------

// PixelImageData

// string name = 1;
inline void PixelImageData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PixelImageData::name() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelImageData.name)
  return name_.GetNoArena();
}
inline void PixelImageData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.PixelImageData.name)
}
#if LANG_CXX11
inline void PixelImageData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.PixelImageData.name)
}
#endif
inline void PixelImageData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.PixelImageData.name)
}
inline void PixelImageData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.PixelImageData.name)
}
inline ::std::string* PixelImageData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.PixelImageData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PixelImageData::release_name() {
  // @@protoc_insertion_point(field_release:ImageService.PixelImageData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PixelImageData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.PixelImageData.name)
}

// string format = 2;
inline void PixelImageData::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PixelImageData::format() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelImageData.format)
  return format_.GetNoArena();
}
inline void PixelImageData::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.PixelImageData.format)
}
#if LANG_CXX11
inline void PixelImageData::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.PixelImageData.format)
}
#endif
inline void PixelImageData::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.PixelImageData.format)
}
inline void PixelImageData::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.PixelImageData.format)
}
inline ::std::string* PixelImageData::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.PixelImageData.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PixelImageData::release_format() {
  // @@protoc_insertion_point(field_release:ImageService.PixelImageData.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PixelImageData::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:ImageService.PixelImageData.format)
}

// bytes data = 3;
inline void PixelImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PixelImageData::data() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelImageData.data)
  return data_.GetNoArena();
}
inline void PixelImageData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.PixelImageData.data)
}
#if LANG_CXX11
inline void PixelImageData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.PixelImageData.data)
}
#endif
inline void PixelImageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.PixelImageData.data)
}
inline void PixelImageData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.PixelImageData.data)
}
inline ::std::string* PixelImageData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.PixelImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PixelImageData::release_data() {
  // @@protoc_insertion_point(field_release:ImageService.PixelImageData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PixelImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ImageService.PixelImageData.data)
}

// uint64 width = 4;
inline void PixelImageData::clear_width() {
  width_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PixelImageData::width() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelImageData.width)
  return width_;
}
inline void PixelImageData::set_width(::google::protobuf::uint64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ImageService.PixelImageData.width)
}

// uint64 height = 5;
inline void PixelImageData::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PixelImageData::height() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelImageData.height)
  return height_;
}
inline void PixelImageData::set_height(::google::protobuf::uint64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ImageService.PixelImageData.height)
}

// -------------------------------------------------------------------

// ImageRequest

// uint64 required_timestamp = 1;
inline void ImageRequest::clear_required_timestamp() {
  required_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ImageRequest::required_timestamp() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageRequest.required_timestamp)
  return required_timestamp_;
}
inline void ImageRequest::set_required_timestamp(::google::protobuf::uint64 value) {
  
  required_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ImageService.ImageRequest.required_timestamp)
}

// string request_channel_name = 2;
inline void ImageRequest::clear_request_channel_name() {
  request_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageRequest::request_channel_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageRequest.request_channel_name)
  return request_channel_name_.GetNoArena();
}
inline void ImageRequest::set_request_channel_name(const ::std::string& value) {
  
  request_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImageRequest.request_channel_name)
}
#if LANG_CXX11
inline void ImageRequest::set_request_channel_name(::std::string&& value) {
  
  request_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImageRequest.request_channel_name)
}
#endif
inline void ImageRequest::set_request_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImageRequest.request_channel_name)
}
inline void ImageRequest::set_request_channel_name(const char* value, size_t size) {
  
  request_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageRequest.request_channel_name)
}
inline ::std::string* ImageRequest::mutable_request_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImageRequest.request_channel_name)
  return request_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageRequest::release_request_channel_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImageRequest.request_channel_name)
  
  return request_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRequest::set_allocated_request_channel_name(::std::string* request_channel_name) {
  if (request_channel_name != NULL) {
    
  } else {
    
  }
  request_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_channel_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImageRequest.request_channel_name)
}

// string request_device_name = 3;
inline void ImageRequest::clear_request_device_name() {
  request_device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageRequest::request_device_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageRequest.request_device_name)
  return request_device_name_.GetNoArena();
}
inline void ImageRequest::set_request_device_name(const ::std::string& value) {
  
  request_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImageRequest.request_device_name)
}
#if LANG_CXX11
inline void ImageRequest::set_request_device_name(::std::string&& value) {
  
  request_device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImageRequest.request_device_name)
}
#endif
inline void ImageRequest::set_request_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImageRequest.request_device_name)
}
inline void ImageRequest::set_request_device_name(const char* value, size_t size) {
  
  request_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageRequest.request_device_name)
}
inline ::std::string* ImageRequest::mutable_request_device_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImageRequest.request_device_name)
  return request_device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageRequest::release_request_device_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImageRequest.request_device_name)
  
  return request_device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRequest::set_allocated_request_device_name(::std::string* request_device_name) {
  if (request_device_name != NULL) {
    
  } else {
    
  }
  request_device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_device_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImageRequest.request_device_name)
}

// repeated string image_name = 4;
inline int ImageRequest::image_name_size() const {
  return image_name_.size();
}
inline void ImageRequest::clear_image_name() {
  image_name_.Clear();
}
inline const ::std::string& ImageRequest::image_name(int index) const {
  // @@protoc_insertion_point(field_get:ImageService.ImageRequest.image_name)
  return image_name_.Get(index);
}
inline ::std::string* ImageRequest::mutable_image_name(int index) {
  // @@protoc_insertion_point(field_mutable:ImageService.ImageRequest.image_name)
  return image_name_.Mutable(index);
}
inline void ImageRequest::set_image_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ImageService.ImageRequest.image_name)
  image_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ImageRequest::set_image_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ImageService.ImageRequest.image_name)
  image_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ImageRequest::set_image_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ImageService.ImageRequest.image_name)
}
inline void ImageRequest::set_image_name(int index, const char* value, size_t size) {
  image_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageRequest.image_name)
}
inline ::std::string* ImageRequest::add_image_name() {
  // @@protoc_insertion_point(field_add_mutable:ImageService.ImageRequest.image_name)
  return image_name_.Add();
}
inline void ImageRequest::add_image_name(const ::std::string& value) {
  image_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ImageService.ImageRequest.image_name)
}
#if LANG_CXX11
inline void ImageRequest::add_image_name(::std::string&& value) {
  image_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ImageService.ImageRequest.image_name)
}
#endif
inline void ImageRequest::add_image_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ImageService.ImageRequest.image_name)
}
inline void ImageRequest::add_image_name(const char* value, size_t size) {
  image_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ImageService.ImageRequest.image_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageRequest::image_name() const {
  // @@protoc_insertion_point(field_list:ImageService.ImageRequest.image_name)
  return image_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageRequest::mutable_image_name() {
  // @@protoc_insertion_point(field_mutable_list:ImageService.ImageRequest.image_name)
  return &image_name_;
}

// uint64 image_index = 5;
inline void ImageRequest::clear_image_index() {
  image_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ImageRequest::image_index() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageRequest.image_index)
  return image_index_;
}
inline void ImageRequest::set_image_index(::google::protobuf::uint64 value) {
  
  image_index_ = value;
  // @@protoc_insertion_point(field_set:ImageService.ImageRequest.image_index)
}

// -------------------------------------------------------------------

// ImageResponse

// uint64 recieved_timestamp = 1;
inline void ImageResponse::clear_recieved_timestamp() {
  recieved_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ImageResponse::recieved_timestamp() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageResponse.recieved_timestamp)
  return recieved_timestamp_;
}
inline void ImageResponse::set_recieved_timestamp(::google::protobuf::uint64 value) {
  
  recieved_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ImageService.ImageResponse.recieved_timestamp)
}

// string response_channel_name = 2;
inline void ImageResponse::clear_response_channel_name() {
  response_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageResponse::response_channel_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageResponse.response_channel_name)
  return response_channel_name_.GetNoArena();
}
inline void ImageResponse::set_response_channel_name(const ::std::string& value) {
  
  response_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImageResponse.response_channel_name)
}
#if LANG_CXX11
inline void ImageResponse::set_response_channel_name(::std::string&& value) {
  
  response_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImageResponse.response_channel_name)
}
#endif
inline void ImageResponse::set_response_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImageResponse.response_channel_name)
}
inline void ImageResponse::set_response_channel_name(const char* value, size_t size) {
  
  response_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageResponse.response_channel_name)
}
inline ::std::string* ImageResponse::mutable_response_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImageResponse.response_channel_name)
  return response_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageResponse::release_response_channel_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImageResponse.response_channel_name)
  
  return response_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_response_channel_name(::std::string* response_channel_name) {
  if (response_channel_name != NULL) {
    
  } else {
    
  }
  response_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_channel_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImageResponse.response_channel_name)
}

// string base_image_name = 3;
inline void ImageResponse::clear_base_image_name() {
  base_image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageResponse::base_image_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageResponse.base_image_name)
  return base_image_name_.GetNoArena();
}
inline void ImageResponse::set_base_image_name(const ::std::string& value) {
  
  base_image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImageResponse.base_image_name)
}
#if LANG_CXX11
inline void ImageResponse::set_base_image_name(::std::string&& value) {
  
  base_image_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImageResponse.base_image_name)
}
#endif
inline void ImageResponse::set_base_image_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImageResponse.base_image_name)
}
inline void ImageResponse::set_base_image_name(const char* value, size_t size) {
  
  base_image_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageResponse.base_image_name)
}
inline ::std::string* ImageResponse::mutable_base_image_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImageResponse.base_image_name)
  return base_image_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageResponse::release_base_image_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImageResponse.base_image_name)
  
  return base_image_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_base_image_name(::std::string* base_image_name) {
  if (base_image_name != NULL) {
    
  } else {
    
  }
  base_image_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_image_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImageResponse.base_image_name)
}

// bytes base_image = 4;
inline void ImageResponse::clear_base_image() {
  base_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageResponse::base_image() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageResponse.base_image)
  return base_image_.GetNoArena();
}
inline void ImageResponse::set_base_image(const ::std::string& value) {
  
  base_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImageResponse.base_image)
}
#if LANG_CXX11
inline void ImageResponse::set_base_image(::std::string&& value) {
  
  base_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImageResponse.base_image)
}
#endif
inline void ImageResponse::set_base_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImageResponse.base_image)
}
inline void ImageResponse::set_base_image(const void* value, size_t size) {
  
  base_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageResponse.base_image)
}
inline ::std::string* ImageResponse::mutable_base_image() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImageResponse.base_image)
  return base_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageResponse::release_base_image() {
  // @@protoc_insertion_point(field_release:ImageService.ImageResponse.base_image)
  
  return base_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_base_image(::std::string* base_image) {
  if (base_image != NULL) {
    
  } else {
    
  }
  base_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_image);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImageResponse.base_image)
}

// repeated .ImageService.PixelImageData image_bytes = 5;
inline int ImageResponse::image_bytes_size() const {
  return image_bytes_.size();
}
inline void ImageResponse::clear_image_bytes() {
  image_bytes_.Clear();
}
inline const ::ImageService::PixelImageData& ImageResponse::image_bytes(int index) const {
  // @@protoc_insertion_point(field_get:ImageService.ImageResponse.image_bytes)
  return image_bytes_.Get(index);
}
inline ::ImageService::PixelImageData* ImageResponse::mutable_image_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:ImageService.ImageResponse.image_bytes)
  return image_bytes_.Mutable(index);
}
inline ::ImageService::PixelImageData* ImageResponse::add_image_bytes() {
  // @@protoc_insertion_point(field_add:ImageService.ImageResponse.image_bytes)
  return image_bytes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >*
ImageResponse::mutable_image_bytes() {
  // @@protoc_insertion_point(field_mutable_list:ImageService.ImageResponse.image_bytes)
  return &image_bytes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >&
ImageResponse::image_bytes() const {
  // @@protoc_insertion_point(field_list:ImageService.ImageResponse.image_bytes)
  return image_bytes_;
}

// string response_device_name = 6;
inline void ImageResponse::clear_response_device_name() {
  response_device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageResponse::response_device_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageResponse.response_device_name)
  return response_device_name_.GetNoArena();
}
inline void ImageResponse::set_response_device_name(const ::std::string& value) {
  
  response_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImageResponse.response_device_name)
}
#if LANG_CXX11
inline void ImageResponse::set_response_device_name(::std::string&& value) {
  
  response_device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImageResponse.response_device_name)
}
#endif
inline void ImageResponse::set_response_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImageResponse.response_device_name)
}
inline void ImageResponse::set_response_device_name(const char* value, size_t size) {
  
  response_device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageResponse.response_device_name)
}
inline ::std::string* ImageResponse::mutable_response_device_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImageResponse.response_device_name)
  return response_device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageResponse::release_response_device_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImageResponse.response_device_name)
  
  return response_device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_response_device_name(::std::string* response_device_name) {
  if (response_device_name != NULL) {
    
  } else {
    
  }
  response_device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_device_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImageResponse.response_device_name)
}

// -------------------------------------------------------------------

// ImageDeleteRequest

// uint64 required_timestamp = 1;
inline void ImageDeleteRequest::clear_required_timestamp() {
  required_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ImageDeleteRequest::required_timestamp() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageDeleteRequest.required_timestamp)
  return required_timestamp_;
}
inline void ImageDeleteRequest::set_required_timestamp(::google::protobuf::uint64 value) {
  
  required_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ImageService.ImageDeleteRequest.required_timestamp)
}

// string request_channel_name = 2;
inline void ImageDeleteRequest::clear_request_channel_name() {
  request_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageDeleteRequest::request_channel_name() const {
  // @@protoc_insertion_point(field_get:ImageService.ImageDeleteRequest.request_channel_name)
  return request_channel_name_.GetNoArena();
}
inline void ImageDeleteRequest::set_request_channel_name(const ::std::string& value) {
  
  request_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.ImageDeleteRequest.request_channel_name)
}
#if LANG_CXX11
inline void ImageDeleteRequest::set_request_channel_name(::std::string&& value) {
  
  request_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.ImageDeleteRequest.request_channel_name)
}
#endif
inline void ImageDeleteRequest::set_request_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.ImageDeleteRequest.request_channel_name)
}
inline void ImageDeleteRequest::set_request_channel_name(const char* value, size_t size) {
  
  request_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageDeleteRequest.request_channel_name)
}
inline ::std::string* ImageDeleteRequest::mutable_request_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.ImageDeleteRequest.request_channel_name)
  return request_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDeleteRequest::release_request_channel_name() {
  // @@protoc_insertion_point(field_release:ImageService.ImageDeleteRequest.request_channel_name)
  
  return request_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDeleteRequest::set_allocated_request_channel_name(::std::string* request_channel_name) {
  if (request_channel_name != NULL) {
    
  } else {
    
  }
  request_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_channel_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.ImageDeleteRequest.request_channel_name)
}

// repeated string image_name = 3;
inline int ImageDeleteRequest::image_name_size() const {
  return image_name_.size();
}
inline void ImageDeleteRequest::clear_image_name() {
  image_name_.Clear();
}
inline const ::std::string& ImageDeleteRequest::image_name(int index) const {
  // @@protoc_insertion_point(field_get:ImageService.ImageDeleteRequest.image_name)
  return image_name_.Get(index);
}
inline ::std::string* ImageDeleteRequest::mutable_image_name(int index) {
  // @@protoc_insertion_point(field_mutable:ImageService.ImageDeleteRequest.image_name)
  return image_name_.Mutable(index);
}
inline void ImageDeleteRequest::set_image_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ImageService.ImageDeleteRequest.image_name)
  image_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ImageDeleteRequest::set_image_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ImageService.ImageDeleteRequest.image_name)
  image_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ImageDeleteRequest::set_image_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ImageService.ImageDeleteRequest.image_name)
}
inline void ImageDeleteRequest::set_image_name(int index, const char* value, size_t size) {
  image_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ImageService.ImageDeleteRequest.image_name)
}
inline ::std::string* ImageDeleteRequest::add_image_name() {
  // @@protoc_insertion_point(field_add_mutable:ImageService.ImageDeleteRequest.image_name)
  return image_name_.Add();
}
inline void ImageDeleteRequest::add_image_name(const ::std::string& value) {
  image_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ImageService.ImageDeleteRequest.image_name)
}
#if LANG_CXX11
inline void ImageDeleteRequest::add_image_name(::std::string&& value) {
  image_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ImageService.ImageDeleteRequest.image_name)
}
#endif
inline void ImageDeleteRequest::add_image_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ImageService.ImageDeleteRequest.image_name)
}
inline void ImageDeleteRequest::add_image_name(const char* value, size_t size) {
  image_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ImageService.ImageDeleteRequest.image_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageDeleteRequest::image_name() const {
  // @@protoc_insertion_point(field_list:ImageService.ImageDeleteRequest.image_name)
  return image_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageDeleteRequest::mutable_image_name() {
  // @@protoc_insertion_point(field_mutable_list:ImageService.ImageDeleteRequest.image_name)
  return &image_name_;
}

// -------------------------------------------------------------------

// PixelLabelWriteRequest

// uint64 recieved_timestamp = 1;
inline void PixelLabelWriteRequest::clear_recieved_timestamp() {
  recieved_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PixelLabelWriteRequest::recieved_timestamp() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelLabelWriteRequest.recieved_timestamp)
  return recieved_timestamp_;
}
inline void PixelLabelWriteRequest::set_recieved_timestamp(::google::protobuf::uint64 value) {
  
  recieved_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ImageService.PixelLabelWriteRequest.recieved_timestamp)
}

// string response_channel_name = 2;
inline void PixelLabelWriteRequest::clear_response_channel_name() {
  response_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PixelLabelWriteRequest::response_channel_name() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelLabelWriteRequest.response_channel_name)
  return response_channel_name_.GetNoArena();
}
inline void PixelLabelWriteRequest::set_response_channel_name(const ::std::string& value) {
  
  response_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.PixelLabelWriteRequest.response_channel_name)
}
#if LANG_CXX11
inline void PixelLabelWriteRequest::set_response_channel_name(::std::string&& value) {
  
  response_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.PixelLabelWriteRequest.response_channel_name)
}
#endif
inline void PixelLabelWriteRequest::set_response_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.PixelLabelWriteRequest.response_channel_name)
}
inline void PixelLabelWriteRequest::set_response_channel_name(const char* value, size_t size) {
  
  response_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.PixelLabelWriteRequest.response_channel_name)
}
inline ::std::string* PixelLabelWriteRequest::mutable_response_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.PixelLabelWriteRequest.response_channel_name)
  return response_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PixelLabelWriteRequest::release_response_channel_name() {
  // @@protoc_insertion_point(field_release:ImageService.PixelLabelWriteRequest.response_channel_name)
  
  return response_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PixelLabelWriteRequest::set_allocated_response_channel_name(::std::string* response_channel_name) {
  if (response_channel_name != NULL) {
    
  } else {
    
  }
  response_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_channel_name);
  // @@protoc_insertion_point(field_set_allocated:ImageService.PixelLabelWriteRequest.response_channel_name)
}

// repeated .ImageService.PixelImageData image = 3;
inline int PixelLabelWriteRequest::image_size() const {
  return image_.size();
}
inline void PixelLabelWriteRequest::clear_image() {
  image_.Clear();
}
inline const ::ImageService::PixelImageData& PixelLabelWriteRequest::image(int index) const {
  // @@protoc_insertion_point(field_get:ImageService.PixelLabelWriteRequest.image)
  return image_.Get(index);
}
inline ::ImageService::PixelImageData* PixelLabelWriteRequest::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:ImageService.PixelLabelWriteRequest.image)
  return image_.Mutable(index);
}
inline ::ImageService::PixelImageData* PixelLabelWriteRequest::add_image() {
  // @@protoc_insertion_point(field_add:ImageService.PixelLabelWriteRequest.image)
  return image_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >*
PixelLabelWriteRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:ImageService.PixelLabelWriteRequest.image)
  return &image_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ImageService::PixelImageData >&
PixelLabelWriteRequest::image() const {
  // @@protoc_insertion_point(field_list:ImageService.PixelLabelWriteRequest.image)
  return image_;
}

// -------------------------------------------------------------------

// PixelLabelWriteResponse

// bool status = 1;
inline void PixelLabelWriteResponse::clear_status() {
  status_ = false;
}
inline bool PixelLabelWriteResponse::status() const {
  // @@protoc_insertion_point(field_get:ImageService.PixelLabelWriteResponse.status)
  return status_;
}
inline void PixelLabelWriteResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ImageService.PixelLabelWriteResponse.status)
}

// -------------------------------------------------------------------

// HFLResponse

// uint64 timestamp = 1;
inline void HFLResponse::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HFLResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:ImageService.HFLResponse.timestamp)
  return timestamp_;
}
inline void HFLResponse::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ImageService.HFLResponse.timestamp)
}

// bytes intensity_image = 2;
inline void HFLResponse::clear_intensity_image() {
  intensity_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HFLResponse::intensity_image() const {
  // @@protoc_insertion_point(field_get:ImageService.HFLResponse.intensity_image)
  return intensity_image_.GetNoArena();
}
inline void HFLResponse::set_intensity_image(const ::std::string& value) {
  
  intensity_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.HFLResponse.intensity_image)
}
#if LANG_CXX11
inline void HFLResponse::set_intensity_image(::std::string&& value) {
  
  intensity_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.HFLResponse.intensity_image)
}
#endif
inline void HFLResponse::set_intensity_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  intensity_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.HFLResponse.intensity_image)
}
inline void HFLResponse::set_intensity_image(const void* value, size_t size) {
  
  intensity_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.HFLResponse.intensity_image)
}
inline ::std::string* HFLResponse::mutable_intensity_image() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.HFLResponse.intensity_image)
  return intensity_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HFLResponse::release_intensity_image() {
  // @@protoc_insertion_point(field_release:ImageService.HFLResponse.intensity_image)
  
  return intensity_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HFLResponse::set_allocated_intensity_image(::std::string* intensity_image) {
  if (intensity_image != NULL) {
    
  } else {
    
  }
  intensity_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), intensity_image);
  // @@protoc_insertion_point(field_set_allocated:ImageService.HFLResponse.intensity_image)
}

// bytes distance_image = 3;
inline void HFLResponse::clear_distance_image() {
  distance_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HFLResponse::distance_image() const {
  // @@protoc_insertion_point(field_get:ImageService.HFLResponse.distance_image)
  return distance_image_.GetNoArena();
}
inline void HFLResponse::set_distance_image(const ::std::string& value) {
  
  distance_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageService.HFLResponse.distance_image)
}
#if LANG_CXX11
inline void HFLResponse::set_distance_image(::std::string&& value) {
  
  distance_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageService.HFLResponse.distance_image)
}
#endif
inline void HFLResponse::set_distance_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  distance_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageService.HFLResponse.distance_image)
}
inline void HFLResponse::set_distance_image(const void* value, size_t size) {
  
  distance_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageService.HFLResponse.distance_image)
}
inline ::std::string* HFLResponse::mutable_distance_image() {
  
  // @@protoc_insertion_point(field_mutable:ImageService.HFLResponse.distance_image)
  return distance_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HFLResponse::release_distance_image() {
  // @@protoc_insertion_point(field_release:ImageService.HFLResponse.distance_image)
  
  return distance_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HFLResponse::set_allocated_distance_image(::std::string* distance_image) {
  if (distance_image != NULL) {
    
  } else {
    
  }
  distance_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distance_image);
  // @@protoc_insertion_point(field_set_allocated:ImageService.HFLResponse.distance_image)
}

// uint64 HFL_image_index = 4;
inline void HFLResponse::clear_hfl_image_index() {
  hfl_image_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HFLResponse::hfl_image_index() const {
  // @@protoc_insertion_point(field_get:ImageService.HFLResponse.HFL_image_index)
  return hfl_image_index_;
}
inline void HFLResponse::set_hfl_image_index(::google::protobuf::uint64 value) {
  
  hfl_image_index_ = value;
  // @@protoc_insertion_point(field_set:ImageService.HFLResponse.HFL_image_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ImageService

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imageservice_2eproto__INCLUDED
