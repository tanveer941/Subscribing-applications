// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageservice.proto

#include "imageservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace ImageService {
class ImgCntRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImgCntRequest>
      _instance;
} _ImgCntRequest_default_instance_;
class ImgCntResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImgCntResponse>
      _instance;
} _ImgCntResponse_default_instance_;
class infoChannelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<infoChannelRequest>
      _instance;
} _infoChannelRequest_default_instance_;
class deviceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<deviceData>
      _instance;
} _deviceData_default_instance_;
class channelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<channelInfo>
      _instance;
} _channelInfo_default_instance_;
class sourceFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sourceFileRequest>
      _instance;
} _sourceFileRequest_default_instance_;
class sourceFileRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sourceFileResp>
      _instance;
} _sourceFileResp_default_instance_;
class setSourceFolderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<setSourceFolderRequest>
      _instance;
} _setSourceFolderRequest_default_instance_;
class setSourceFolderRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<setSourceFolderResp>
      _instance;
} _setSourceFolderResp_default_instance_;
class devicesDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<devicesDataRequest>
      _instance;
} _devicesDataRequest_default_instance_;
class devicesDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<devicesDataResponse>
      _instance;
} _devicesDataResponse_default_instance_;
class PixelImageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PixelImageData>
      _instance;
} _PixelImageData_default_instance_;
class ImageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageRequest>
      _instance;
} _ImageRequest_default_instance_;
class ImageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageResponse>
      _instance;
} _ImageResponse_default_instance_;
class ImageDeleteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageDeleteRequest>
      _instance;
} _ImageDeleteRequest_default_instance_;
class PixelLabelWriteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PixelLabelWriteRequest>
      _instance;
} _PixelLabelWriteRequest_default_instance_;
class PixelLabelWriteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PixelLabelWriteResponse>
      _instance;
} _PixelLabelWriteResponse_default_instance_;
class HFLResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HFLResponse>
      _instance;
} _HFLResponse_default_instance_;
}  // namespace ImageService
namespace protobuf_imageservice_2eproto {
void InitDefaultsImgCntRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_ImgCntRequest_default_instance_;
    new (ptr) ::ImageService::ImgCntRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::ImgCntRequest::InitAsDefaultInstance();
}

void InitDefaultsImgCntRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImgCntRequestImpl);
}

void InitDefaultsImgCntResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_ImgCntResponse_default_instance_;
    new (ptr) ::ImageService::ImgCntResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::ImgCntResponse::InitAsDefaultInstance();
}

void InitDefaultsImgCntResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImgCntResponseImpl);
}

void InitDefaultsinfoChannelRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_infoChannelRequest_default_instance_;
    new (ptr) ::ImageService::infoChannelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::infoChannelRequest::InitAsDefaultInstance();
}

void InitDefaultsinfoChannelRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsinfoChannelRequestImpl);
}

void InitDefaultsdeviceDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_imageservice_2eproto::InitDefaultschannelInfo();
  {
    void* ptr = &::ImageService::_deviceData_default_instance_;
    new (ptr) ::ImageService::deviceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::deviceData::InitAsDefaultInstance();
}

void InitDefaultsdeviceData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdeviceDataImpl);
}

void InitDefaultschannelInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_channelInfo_default_instance_;
    new (ptr) ::ImageService::channelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::channelInfo::InitAsDefaultInstance();
}

void InitDefaultschannelInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultschannelInfoImpl);
}

void InitDefaultssourceFileRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_sourceFileRequest_default_instance_;
    new (ptr) ::ImageService::sourceFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::sourceFileRequest::InitAsDefaultInstance();
}

void InitDefaultssourceFileRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultssourceFileRequestImpl);
}

void InitDefaultssourceFileRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_sourceFileResp_default_instance_;
    new (ptr) ::ImageService::sourceFileResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::sourceFileResp::InitAsDefaultInstance();
}

void InitDefaultssourceFileResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultssourceFileRespImpl);
}

void InitDefaultssetSourceFolderRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_setSourceFolderRequest_default_instance_;
    new (ptr) ::ImageService::setSourceFolderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::setSourceFolderRequest::InitAsDefaultInstance();
}

void InitDefaultssetSourceFolderRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultssetSourceFolderRequestImpl);
}

void InitDefaultssetSourceFolderRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_setSourceFolderResp_default_instance_;
    new (ptr) ::ImageService::setSourceFolderResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::setSourceFolderResp::InitAsDefaultInstance();
}

void InitDefaultssetSourceFolderResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultssetSourceFolderRespImpl);
}

void InitDefaultsdevicesDataRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_devicesDataRequest_default_instance_;
    new (ptr) ::ImageService::devicesDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::devicesDataRequest::InitAsDefaultInstance();
}

void InitDefaultsdevicesDataRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdevicesDataRequestImpl);
}

void InitDefaultsdevicesDataResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_imageservice_2eproto::InitDefaultsdeviceData();
  {
    void* ptr = &::ImageService::_devicesDataResponse_default_instance_;
    new (ptr) ::ImageService::devicesDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::devicesDataResponse::InitAsDefaultInstance();
}

void InitDefaultsdevicesDataResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdevicesDataResponseImpl);
}

void InitDefaultsPixelImageDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_PixelImageData_default_instance_;
    new (ptr) ::ImageService::PixelImageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::PixelImageData::InitAsDefaultInstance();
}

void InitDefaultsPixelImageData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPixelImageDataImpl);
}

void InitDefaultsImageRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_ImageRequest_default_instance_;
    new (ptr) ::ImageService::ImageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::ImageRequest::InitAsDefaultInstance();
}

void InitDefaultsImageRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageRequestImpl);
}

void InitDefaultsImageResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_imageservice_2eproto::InitDefaultsPixelImageData();
  {
    void* ptr = &::ImageService::_ImageResponse_default_instance_;
    new (ptr) ::ImageService::ImageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::ImageResponse::InitAsDefaultInstance();
}

void InitDefaultsImageResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageResponseImpl);
}

void InitDefaultsImageDeleteRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_ImageDeleteRequest_default_instance_;
    new (ptr) ::ImageService::ImageDeleteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::ImageDeleteRequest::InitAsDefaultInstance();
}

void InitDefaultsImageDeleteRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageDeleteRequestImpl);
}

void InitDefaultsPixelLabelWriteRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_imageservice_2eproto::InitDefaultsPixelImageData();
  {
    void* ptr = &::ImageService::_PixelLabelWriteRequest_default_instance_;
    new (ptr) ::ImageService::PixelLabelWriteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::PixelLabelWriteRequest::InitAsDefaultInstance();
}

void InitDefaultsPixelLabelWriteRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPixelLabelWriteRequestImpl);
}

void InitDefaultsPixelLabelWriteResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_PixelLabelWriteResponse_default_instance_;
    new (ptr) ::ImageService::PixelLabelWriteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::PixelLabelWriteResponse::InitAsDefaultInstance();
}

void InitDefaultsPixelLabelWriteResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPixelLabelWriteResponseImpl);
}

void InitDefaultsHFLResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ImageService::_HFLResponse_default_instance_;
    new (ptr) ::ImageService::HFLResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImageService::HFLResponse::InitAsDefaultInstance();
}

void InitDefaultsHFLResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHFLResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[18];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImgCntRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImgCntRequest, channel_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImgCntResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImgCntResponse, total_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImgCntResponse, channel_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::infoChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::infoChannelRequest, required_channel_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::deviceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::deviceData, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::deviceData, channel_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::deviceData, no_of_channels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::channelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::channelInfo, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::channelInfo, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::sourceFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::sourceFileRequest, sourcefile_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::sourceFileResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::sourceFileResp, sourcefile_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::setSourceFolderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::setSourceFolderRequest, sourcefolder_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::setSourceFolderResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::setSourceFolderResp, sourcefolder_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::devicesDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::devicesDataRequest, required_devicesdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::devicesDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::devicesDataResponse, devicedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::devicesDataResponse, devicecount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelImageData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelImageData, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelImageData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelImageData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelImageData, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageRequest, required_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageRequest, request_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageRequest, request_device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageRequest, image_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageRequest, image_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageResponse, recieved_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageResponse, response_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageResponse, base_image_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageResponse, base_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageResponse, image_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageResponse, response_device_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageDeleteRequest, required_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageDeleteRequest, request_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::ImageDeleteRequest, image_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelLabelWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelLabelWriteRequest, recieved_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelLabelWriteRequest, response_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelLabelWriteRequest, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelLabelWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::PixelLabelWriteResponse, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::HFLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::HFLResponse, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::HFLResponse, intensity_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::HFLResponse, distance_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ImageService::HFLResponse, hfl_image_index_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ImageService::ImgCntRequest)},
  { 6, -1, sizeof(::ImageService::ImgCntResponse)},
  { 13, -1, sizeof(::ImageService::infoChannelRequest)},
  { 19, -1, sizeof(::ImageService::deviceData)},
  { 27, -1, sizeof(::ImageService::channelInfo)},
  { 34, -1, sizeof(::ImageService::sourceFileRequest)},
  { 40, -1, sizeof(::ImageService::sourceFileResp)},
  { 46, -1, sizeof(::ImageService::setSourceFolderRequest)},
  { 52, -1, sizeof(::ImageService::setSourceFolderResp)},
  { 58, -1, sizeof(::ImageService::devicesDataRequest)},
  { 64, -1, sizeof(::ImageService::devicesDataResponse)},
  { 71, -1, sizeof(::ImageService::PixelImageData)},
  { 81, -1, sizeof(::ImageService::ImageRequest)},
  { 91, -1, sizeof(::ImageService::ImageResponse)},
  { 102, -1, sizeof(::ImageService::ImageDeleteRequest)},
  { 110, -1, sizeof(::ImageService::PixelLabelWriteRequest)},
  { 118, -1, sizeof(::ImageService::PixelLabelWriteResponse)},
  { 124, -1, sizeof(::ImageService::HFLResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_ImgCntRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_ImgCntResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_infoChannelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_deviceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_channelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_sourceFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_sourceFileResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_setSourceFolderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_setSourceFolderResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_devicesDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_devicesDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_PixelImageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_ImageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_ImageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_ImageDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_PixelLabelWriteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_PixelLabelWriteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImageService::_HFLResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "imageservice.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022imageservice.proto\022\014ImageService\"%\n\rIm"
      "gCntRequest\022\024\n\014channel_name\030\001 \001(\t\"<\n\016Img"
      "CntResponse\022\024\n\014total_frames\030\001 \001(\005\022\024\n\014cha"
      "nnel_name\030\002 \001(\t\"3\n\022infoChannelRequest\022\035\n"
      "\025required_channel_info\030\001 \001(\010\"i\n\ndeviceDa"
      "ta\022\022\n\ndeviceName\030\001 \001(\t\022/\n\014channel_Info\030\002"
      " \003(\0132\031.ImageService.channelInfo\022\026\n\016no_of"
      "_channels\030\003 \001(\005\"6\n\013channelInfo\022\024\n\014channe"
      "l_name\030\001 \001(\t\022\021\n\ttimestamp\030\002 \003(\004\",\n\021sourc"
      "eFileRequest\022\027\n\017sourcefile_name\030\001 \001(\t\")\n"
      "\016sourceFileResp\022\027\n\017sourcefile_name\030\001 \001(\t"
      "\"3\n\026setSourceFolderRequest\022\031\n\021sourcefold"
      "er_name\030\001 \001(\t\"0\n\023setSourceFolderResp\022\031\n\021"
      "sourcefolder_name\030\001 \001(\t\"2\n\022devicesDataRe"
      "quest\022\034\n\024required_devicesData\030\001 \001(\010\"X\n\023d"
      "evicesDataResponse\022,\n\ndevicedata\030\001 \003(\0132\030"
      ".ImageService.deviceData\022\023\n\013deviceCount\030"
      "\002 \001(\005\"[\n\016PixelImageData\022\014\n\004name\030\001 \001(\t\022\016\n"
      "\006format\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\022\r\n\005width\030\004 \001"
      "(\004\022\016\n\006height\030\005 \001(\004\"\216\001\n\014ImageRequest\022\032\n\022r"
      "equired_timestamp\030\001 \001(\004\022\034\n\024request_chann"
      "el_name\030\002 \001(\t\022\033\n\023request_device_name\030\003 \001"
      "(\t\022\022\n\nimage_name\030\004 \003(\t\022\023\n\013image_index\030\005 "
      "\001(\004\"\310\001\n\rImageResponse\022\032\n\022recieved_timest"
      "amp\030\001 \001(\004\022\035\n\025response_channel_name\030\002 \001(\t"
      "\022\027\n\017base_image_name\030\003 \001(\t\022\022\n\nbase_image\030"
      "\004 \001(\014\0221\n\013image_bytes\030\005 \003(\0132\034.ImageServic"
      "e.PixelImageData\022\034\n\024response_device_name"
      "\030\006 \001(\t\"b\n\022ImageDeleteRequest\022\032\n\022required"
      "_timestamp\030\001 \001(\004\022\034\n\024request_channel_name"
      "\030\002 \001(\t\022\022\n\nimage_name\030\003 \003(\t\"\200\001\n\026PixelLabe"
      "lWriteRequest\022\032\n\022recieved_timestamp\030\001 \001("
      "\004\022\035\n\025response_channel_name\030\002 \001(\t\022+\n\005imag"
      "e\030\003 \003(\0132\034.ImageService.PixelImageData\")\n"
      "\027PixelLabelWriteResponse\022\016\n\006status\030\001 \001(\010"
      "\"j\n\013HFLResponse\022\021\n\ttimestamp\030\001 \001(\004\022\027\n\017in"
      "tensity_image\030\002 \001(\014\022\026\n\016distance_image\030\003 "
      "\001(\014\022\027\n\017HFL_image_index\030\004 \001(\004B\003\200\001\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imageservice.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_imageservice_2eproto
namespace ImageService {

// ===================================================================

void ImgCntRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgCntRequest::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgCntRequest::ImgCntRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsImgCntRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.ImgCntRequest)
}
ImgCntRequest::ImgCntRequest(const ImgCntRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ImageService.ImgCntRequest)
}

void ImgCntRequest::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ImgCntRequest::~ImgCntRequest() {
  // @@protoc_insertion_point(destructor:ImageService.ImgCntRequest)
  SharedDtor();
}

void ImgCntRequest::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImgCntRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgCntRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgCntRequest& ImgCntRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsImgCntRequest();
  return *internal_default_instance();
}

ImgCntRequest* ImgCntRequest::New(::google::protobuf::Arena* arena) const {
  ImgCntRequest* n = new ImgCntRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgCntRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.ImgCntRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ImgCntRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.ImgCntRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImgCntRequest.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.ImgCntRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.ImgCntRequest)
  return false;
#undef DO_
}

void ImgCntRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.ImgCntRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImgCntRequest.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.ImgCntRequest)
}

::google::protobuf::uint8* ImgCntRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.ImgCntRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImgCntRequest.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.ImgCntRequest)
  return target;
}

size_t ImgCntRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.ImgCntRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgCntRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.ImgCntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgCntRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgCntRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.ImgCntRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.ImgCntRequest)
    MergeFrom(*source);
  }
}

void ImgCntRequest::MergeFrom(const ImgCntRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.ImgCntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
}

void ImgCntRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.ImgCntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgCntRequest::CopyFrom(const ImgCntRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.ImgCntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgCntRequest::IsInitialized() const {
  return true;
}

void ImgCntRequest::Swap(ImgCntRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgCntRequest::InternalSwap(ImgCntRequest* other) {
  using std::swap;
  channel_name_.Swap(&other->channel_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgCntRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImgCntResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgCntResponse::kTotalFramesFieldNumber;
const int ImgCntResponse::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgCntResponse::ImgCntResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsImgCntResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.ImgCntResponse)
}
ImgCntResponse::ImgCntResponse(const ImgCntResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  total_frames_ = from.total_frames_;
  // @@protoc_insertion_point(copy_constructor:ImageService.ImgCntResponse)
}

void ImgCntResponse::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_frames_ = 0;
  _cached_size_ = 0;
}

ImgCntResponse::~ImgCntResponse() {
  // @@protoc_insertion_point(destructor:ImageService.ImgCntResponse)
  SharedDtor();
}

void ImgCntResponse::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImgCntResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgCntResponse::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgCntResponse& ImgCntResponse::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsImgCntResponse();
  return *internal_default_instance();
}

ImgCntResponse* ImgCntResponse::New(::google::protobuf::Arena* arena) const {
  ImgCntResponse* n = new ImgCntResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgCntResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.ImgCntResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_frames_ = 0;
  _internal_metadata_.Clear();
}

bool ImgCntResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.ImgCntResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total_frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImgCntResponse.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.ImgCntResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.ImgCntResponse)
  return false;
#undef DO_
}

void ImgCntResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.ImgCntResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_frames = 1;
  if (this->total_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_frames(), output);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImgCntResponse.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.ImgCntResponse)
}

::google::protobuf::uint8* ImgCntResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.ImgCntResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_frames = 1;
  if (this->total_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_frames(), target);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImgCntResponse.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.ImgCntResponse)
  return target;
}

size_t ImgCntResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.ImgCntResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // int32 total_frames = 1;
  if (this->total_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_frames());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgCntResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.ImgCntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgCntResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgCntResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.ImgCntResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.ImgCntResponse)
    MergeFrom(*source);
  }
}

void ImgCntResponse::MergeFrom(const ImgCntResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.ImgCntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.total_frames() != 0) {
    set_total_frames(from.total_frames());
  }
}

void ImgCntResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.ImgCntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgCntResponse::CopyFrom(const ImgCntResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.ImgCntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgCntResponse::IsInitialized() const {
  return true;
}

void ImgCntResponse::Swap(ImgCntResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgCntResponse::InternalSwap(ImgCntResponse* other) {
  using std::swap;
  channel_name_.Swap(&other->channel_name_);
  swap(total_frames_, other->total_frames_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgCntResponse::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void infoChannelRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int infoChannelRequest::kRequiredChannelInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

infoChannelRequest::infoChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsinfoChannelRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.infoChannelRequest)
}
infoChannelRequest::infoChannelRequest(const infoChannelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  required_channel_info_ = from.required_channel_info_;
  // @@protoc_insertion_point(copy_constructor:ImageService.infoChannelRequest)
}

void infoChannelRequest::SharedCtor() {
  required_channel_info_ = false;
  _cached_size_ = 0;
}

infoChannelRequest::~infoChannelRequest() {
  // @@protoc_insertion_point(destructor:ImageService.infoChannelRequest)
  SharedDtor();
}

void infoChannelRequest::SharedDtor() {
}

void infoChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* infoChannelRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const infoChannelRequest& infoChannelRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsinfoChannelRequest();
  return *internal_default_instance();
}

infoChannelRequest* infoChannelRequest::New(::google::protobuf::Arena* arena) const {
  infoChannelRequest* n = new infoChannelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void infoChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.infoChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_channel_info_ = false;
  _internal_metadata_.Clear();
}

bool infoChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.infoChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool required_channel_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_channel_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.infoChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.infoChannelRequest)
  return false;
#undef DO_
}

void infoChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.infoChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool required_channel_info = 1;
  if (this->required_channel_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required_channel_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.infoChannelRequest)
}

::google::protobuf::uint8* infoChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.infoChannelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool required_channel_info = 1;
  if (this->required_channel_info() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required_channel_info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.infoChannelRequest)
  return target;
}

size_t infoChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.infoChannelRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool required_channel_info = 1;
  if (this->required_channel_info() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void infoChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.infoChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const infoChannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const infoChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.infoChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.infoChannelRequest)
    MergeFrom(*source);
  }
}

void infoChannelRequest::MergeFrom(const infoChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.infoChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.required_channel_info() != 0) {
    set_required_channel_info(from.required_channel_info());
  }
}

void infoChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.infoChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void infoChannelRequest::CopyFrom(const infoChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.infoChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool infoChannelRequest::IsInitialized() const {
  return true;
}

void infoChannelRequest::Swap(infoChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void infoChannelRequest::InternalSwap(infoChannelRequest* other) {
  using std::swap;
  swap(required_channel_info_, other->required_channel_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata infoChannelRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void deviceData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int deviceData::kDeviceNameFieldNumber;
const int deviceData::kChannelInfoFieldNumber;
const int deviceData::kNoOfChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

deviceData::deviceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsdeviceData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.deviceData)
}
deviceData::deviceData(const deviceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_info_(from.channel_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicename().size() > 0) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  no_of_channels_ = from.no_of_channels_;
  // @@protoc_insertion_point(copy_constructor:ImageService.deviceData)
}

void deviceData::SharedCtor() {
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  no_of_channels_ = 0;
  _cached_size_ = 0;
}

deviceData::~deviceData() {
  // @@protoc_insertion_point(destructor:ImageService.deviceData)
  SharedDtor();
}

void deviceData::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void deviceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deviceData::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const deviceData& deviceData::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsdeviceData();
  return *internal_default_instance();
}

deviceData* deviceData::New(::google::protobuf::Arena* arena) const {
  deviceData* n = new deviceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void deviceData::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.deviceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_info_.Clear();
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  no_of_channels_ = 0;
  _internal_metadata_.Clear();
}

bool deviceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.deviceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string deviceName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), static_cast<int>(this->devicename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.deviceData.deviceName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ImageService.channelInfo channel_Info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_channel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 no_of_channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_of_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.deviceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.deviceData)
  return false;
#undef DO_
}

void deviceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.deviceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), static_cast<int>(this->devicename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.deviceData.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // repeated .ImageService.channelInfo channel_Info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel_info(static_cast<int>(i)), output);
  }

  // int32 no_of_channels = 3;
  if (this->no_of_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->no_of_channels(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.deviceData)
}

::google::protobuf::uint8* deviceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.deviceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), static_cast<int>(this->devicename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.deviceData.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // repeated .ImageService.channelInfo channel_Info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->channel_info(static_cast<int>(i)), deterministic, target);
  }

  // int32 no_of_channels = 3;
  if (this->no_of_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->no_of_channels(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.deviceData)
  return target;
}

size_t deviceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.deviceData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ImageService.channelInfo channel_Info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->channel_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel_info(static_cast<int>(i)));
    }
  }

  // string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // int32 no_of_channels = 3;
  if (this->no_of_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->no_of_channels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deviceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.deviceData)
  GOOGLE_DCHECK_NE(&from, this);
  const deviceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const deviceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.deviceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.deviceData)
    MergeFrom(*source);
  }
}

void deviceData::MergeFrom(const deviceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.deviceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_info_.MergeFrom(from.channel_info_);
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.no_of_channels() != 0) {
    set_no_of_channels(from.no_of_channels());
  }
}

void deviceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.deviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deviceData::CopyFrom(const deviceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.deviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceData::IsInitialized() const {
  return true;
}

void deviceData::Swap(deviceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void deviceData::InternalSwap(deviceData* other) {
  using std::swap;
  channel_info_.InternalSwap(&other->channel_info_);
  devicename_.Swap(&other->devicename_);
  swap(no_of_channels_, other->no_of_channels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata deviceData::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void channelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelInfo::kChannelNameFieldNumber;
const int channelInfo::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelInfo::channelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultschannelInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.channelInfo)
}
channelInfo::channelInfo(const channelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      timestamp_(from.timestamp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ImageService.channelInfo)
}

void channelInfo::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

channelInfo::~channelInfo() {
  // @@protoc_insertion_point(destructor:ImageService.channelInfo)
  SharedDtor();
}

void channelInfo::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelInfo::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channelInfo& channelInfo::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultschannelInfo();
  return *internal_default_instance();
}

channelInfo* channelInfo::New(::google::protobuf::Arena* arena) const {
  channelInfo* n = new channelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.channelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.Clear();
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool channelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.channelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.channelInfo.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_timestamp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_timestamp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.channelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.channelInfo)
  return false;
#undef DO_
}

void channelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.channelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.channelInfo.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // repeated uint64 timestamp = 2;
  if (this->timestamp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _timestamp_cached_byte_size_));
  }
  for (int i = 0, n = this->timestamp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->timestamp(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.channelInfo)
}

::google::protobuf::uint8* channelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.channelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.channelInfo.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // repeated uint64 timestamp = 2;
  if (this->timestamp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _timestamp_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->timestamp_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.channelInfo)
  return target;
}

size_t channelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.channelInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 timestamp = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _timestamp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.channelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const channelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.channelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.channelInfo)
    MergeFrom(*source);
  }
}

void channelInfo::MergeFrom(const channelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.channelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timestamp_.MergeFrom(from.timestamp_);
  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
}

void channelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.channelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelInfo::CopyFrom(const channelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.channelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channelInfo::IsInitialized() const {
  return true;
}

void channelInfo::Swap(channelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelInfo::InternalSwap(channelInfo* other) {
  using std::swap;
  timestamp_.InternalSwap(&other->timestamp_);
  channel_name_.Swap(&other->channel_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelInfo::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void sourceFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sourceFileRequest::kSourcefileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sourceFileRequest::sourceFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultssourceFileRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.sourceFileRequest)
}
sourceFileRequest::sourceFileRequest(const sourceFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcefile_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourcefile_name().size() > 0) {
    sourcefile_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefile_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ImageService.sourceFileRequest)
}

void sourceFileRequest::SharedCtor() {
  sourcefile_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

sourceFileRequest::~sourceFileRequest() {
  // @@protoc_insertion_point(destructor:ImageService.sourceFileRequest)
  SharedDtor();
}

void sourceFileRequest::SharedDtor() {
  sourcefile_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sourceFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sourceFileRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sourceFileRequest& sourceFileRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultssourceFileRequest();
  return *internal_default_instance();
}

sourceFileRequest* sourceFileRequest::New(::google::protobuf::Arena* arena) const {
  sourceFileRequest* n = new sourceFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sourceFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.sourceFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcefile_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool sourceFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.sourceFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sourcefile_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcefile_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourcefile_name().data(), static_cast<int>(this->sourcefile_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.sourceFileRequest.sourcefile_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.sourceFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.sourceFileRequest)
  return false;
#undef DO_
}

void sourceFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.sourceFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefile_name = 1;
  if (this->sourcefile_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefile_name().data(), static_cast<int>(this->sourcefile_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.sourceFileRequest.sourcefile_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourcefile_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.sourceFileRequest)
}

::google::protobuf::uint8* sourceFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.sourceFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefile_name = 1;
  if (this->sourcefile_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefile_name().data(), static_cast<int>(this->sourcefile_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.sourceFileRequest.sourcefile_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcefile_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.sourceFileRequest)
  return target;
}

size_t sourceFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.sourceFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sourcefile_name = 1;
  if (this->sourcefile_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcefile_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sourceFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.sourceFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const sourceFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sourceFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.sourceFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.sourceFileRequest)
    MergeFrom(*source);
  }
}

void sourceFileRequest::MergeFrom(const sourceFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.sourceFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourcefile_name().size() > 0) {

    sourcefile_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefile_name_);
  }
}

void sourceFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.sourceFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sourceFileRequest::CopyFrom(const sourceFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.sourceFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sourceFileRequest::IsInitialized() const {
  return true;
}

void sourceFileRequest::Swap(sourceFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sourceFileRequest::InternalSwap(sourceFileRequest* other) {
  using std::swap;
  sourcefile_name_.Swap(&other->sourcefile_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sourceFileRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void sourceFileResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sourceFileResp::kSourcefileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sourceFileResp::sourceFileResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultssourceFileResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.sourceFileResp)
}
sourceFileResp::sourceFileResp(const sourceFileResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcefile_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourcefile_name().size() > 0) {
    sourcefile_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefile_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ImageService.sourceFileResp)
}

void sourceFileResp::SharedCtor() {
  sourcefile_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

sourceFileResp::~sourceFileResp() {
  // @@protoc_insertion_point(destructor:ImageService.sourceFileResp)
  SharedDtor();
}

void sourceFileResp::SharedDtor() {
  sourcefile_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sourceFileResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sourceFileResp::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sourceFileResp& sourceFileResp::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultssourceFileResp();
  return *internal_default_instance();
}

sourceFileResp* sourceFileResp::New(::google::protobuf::Arena* arena) const {
  sourceFileResp* n = new sourceFileResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sourceFileResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.sourceFileResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcefile_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool sourceFileResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.sourceFileResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sourcefile_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcefile_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourcefile_name().data(), static_cast<int>(this->sourcefile_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.sourceFileResp.sourcefile_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.sourceFileResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.sourceFileResp)
  return false;
#undef DO_
}

void sourceFileResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.sourceFileResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefile_name = 1;
  if (this->sourcefile_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefile_name().data(), static_cast<int>(this->sourcefile_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.sourceFileResp.sourcefile_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourcefile_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.sourceFileResp)
}

::google::protobuf::uint8* sourceFileResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.sourceFileResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefile_name = 1;
  if (this->sourcefile_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefile_name().data(), static_cast<int>(this->sourcefile_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.sourceFileResp.sourcefile_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcefile_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.sourceFileResp)
  return target;
}

size_t sourceFileResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.sourceFileResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sourcefile_name = 1;
  if (this->sourcefile_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcefile_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sourceFileResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.sourceFileResp)
  GOOGLE_DCHECK_NE(&from, this);
  const sourceFileResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sourceFileResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.sourceFileResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.sourceFileResp)
    MergeFrom(*source);
  }
}

void sourceFileResp::MergeFrom(const sourceFileResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.sourceFileResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourcefile_name().size() > 0) {

    sourcefile_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefile_name_);
  }
}

void sourceFileResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.sourceFileResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sourceFileResp::CopyFrom(const sourceFileResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.sourceFileResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sourceFileResp::IsInitialized() const {
  return true;
}

void sourceFileResp::Swap(sourceFileResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sourceFileResp::InternalSwap(sourceFileResp* other) {
  using std::swap;
  sourcefile_name_.Swap(&other->sourcefile_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sourceFileResp::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void setSourceFolderRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int setSourceFolderRequest::kSourcefolderNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

setSourceFolderRequest::setSourceFolderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultssetSourceFolderRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.setSourceFolderRequest)
}
setSourceFolderRequest::setSourceFolderRequest(const setSourceFolderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcefolder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourcefolder_name().size() > 0) {
    sourcefolder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefolder_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ImageService.setSourceFolderRequest)
}

void setSourceFolderRequest::SharedCtor() {
  sourcefolder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

setSourceFolderRequest::~setSourceFolderRequest() {
  // @@protoc_insertion_point(destructor:ImageService.setSourceFolderRequest)
  SharedDtor();
}

void setSourceFolderRequest::SharedDtor() {
  sourcefolder_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void setSourceFolderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* setSourceFolderRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const setSourceFolderRequest& setSourceFolderRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultssetSourceFolderRequest();
  return *internal_default_instance();
}

setSourceFolderRequest* setSourceFolderRequest::New(::google::protobuf::Arena* arena) const {
  setSourceFolderRequest* n = new setSourceFolderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void setSourceFolderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.setSourceFolderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcefolder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool setSourceFolderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.setSourceFolderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sourcefolder_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcefolder_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourcefolder_name().data(), static_cast<int>(this->sourcefolder_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.setSourceFolderRequest.sourcefolder_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.setSourceFolderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.setSourceFolderRequest)
  return false;
#undef DO_
}

void setSourceFolderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.setSourceFolderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefolder_name = 1;
  if (this->sourcefolder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefolder_name().data(), static_cast<int>(this->sourcefolder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.setSourceFolderRequest.sourcefolder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourcefolder_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.setSourceFolderRequest)
}

::google::protobuf::uint8* setSourceFolderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.setSourceFolderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefolder_name = 1;
  if (this->sourcefolder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefolder_name().data(), static_cast<int>(this->sourcefolder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.setSourceFolderRequest.sourcefolder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcefolder_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.setSourceFolderRequest)
  return target;
}

size_t setSourceFolderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.setSourceFolderRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sourcefolder_name = 1;
  if (this->sourcefolder_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcefolder_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void setSourceFolderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.setSourceFolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const setSourceFolderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const setSourceFolderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.setSourceFolderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.setSourceFolderRequest)
    MergeFrom(*source);
  }
}

void setSourceFolderRequest::MergeFrom(const setSourceFolderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.setSourceFolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourcefolder_name().size() > 0) {

    sourcefolder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefolder_name_);
  }
}

void setSourceFolderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.setSourceFolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setSourceFolderRequest::CopyFrom(const setSourceFolderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.setSourceFolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setSourceFolderRequest::IsInitialized() const {
  return true;
}

void setSourceFolderRequest::Swap(setSourceFolderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void setSourceFolderRequest::InternalSwap(setSourceFolderRequest* other) {
  using std::swap;
  sourcefolder_name_.Swap(&other->sourcefolder_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata setSourceFolderRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void setSourceFolderResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int setSourceFolderResp::kSourcefolderNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

setSourceFolderResp::setSourceFolderResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultssetSourceFolderResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.setSourceFolderResp)
}
setSourceFolderResp::setSourceFolderResp(const setSourceFolderResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcefolder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourcefolder_name().size() > 0) {
    sourcefolder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefolder_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ImageService.setSourceFolderResp)
}

void setSourceFolderResp::SharedCtor() {
  sourcefolder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

setSourceFolderResp::~setSourceFolderResp() {
  // @@protoc_insertion_point(destructor:ImageService.setSourceFolderResp)
  SharedDtor();
}

void setSourceFolderResp::SharedDtor() {
  sourcefolder_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void setSourceFolderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* setSourceFolderResp::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const setSourceFolderResp& setSourceFolderResp::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultssetSourceFolderResp();
  return *internal_default_instance();
}

setSourceFolderResp* setSourceFolderResp::New(::google::protobuf::Arena* arena) const {
  setSourceFolderResp* n = new setSourceFolderResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void setSourceFolderResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.setSourceFolderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcefolder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool setSourceFolderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.setSourceFolderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sourcefolder_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcefolder_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourcefolder_name().data(), static_cast<int>(this->sourcefolder_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.setSourceFolderResp.sourcefolder_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.setSourceFolderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.setSourceFolderResp)
  return false;
#undef DO_
}

void setSourceFolderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.setSourceFolderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefolder_name = 1;
  if (this->sourcefolder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefolder_name().data(), static_cast<int>(this->sourcefolder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.setSourceFolderResp.sourcefolder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourcefolder_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.setSourceFolderResp)
}

::google::protobuf::uint8* setSourceFolderResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.setSourceFolderResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourcefolder_name = 1;
  if (this->sourcefolder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcefolder_name().data(), static_cast<int>(this->sourcefolder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.setSourceFolderResp.sourcefolder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcefolder_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.setSourceFolderResp)
  return target;
}

size_t setSourceFolderResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.setSourceFolderResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sourcefolder_name = 1;
  if (this->sourcefolder_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcefolder_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void setSourceFolderResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.setSourceFolderResp)
  GOOGLE_DCHECK_NE(&from, this);
  const setSourceFolderResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const setSourceFolderResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.setSourceFolderResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.setSourceFolderResp)
    MergeFrom(*source);
  }
}

void setSourceFolderResp::MergeFrom(const setSourceFolderResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.setSourceFolderResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourcefolder_name().size() > 0) {

    sourcefolder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcefolder_name_);
  }
}

void setSourceFolderResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.setSourceFolderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setSourceFolderResp::CopyFrom(const setSourceFolderResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.setSourceFolderResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setSourceFolderResp::IsInitialized() const {
  return true;
}

void setSourceFolderResp::Swap(setSourceFolderResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void setSourceFolderResp::InternalSwap(setSourceFolderResp* other) {
  using std::swap;
  sourcefolder_name_.Swap(&other->sourcefolder_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata setSourceFolderResp::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void devicesDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int devicesDataRequest::kRequiredDevicesDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

devicesDataRequest::devicesDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsdevicesDataRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.devicesDataRequest)
}
devicesDataRequest::devicesDataRequest(const devicesDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  required_devicesdata_ = from.required_devicesdata_;
  // @@protoc_insertion_point(copy_constructor:ImageService.devicesDataRequest)
}

void devicesDataRequest::SharedCtor() {
  required_devicesdata_ = false;
  _cached_size_ = 0;
}

devicesDataRequest::~devicesDataRequest() {
  // @@protoc_insertion_point(destructor:ImageService.devicesDataRequest)
  SharedDtor();
}

void devicesDataRequest::SharedDtor() {
}

void devicesDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devicesDataRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const devicesDataRequest& devicesDataRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsdevicesDataRequest();
  return *internal_default_instance();
}

devicesDataRequest* devicesDataRequest::New(::google::protobuf::Arena* arena) const {
  devicesDataRequest* n = new devicesDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void devicesDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.devicesDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_devicesdata_ = false;
  _internal_metadata_.Clear();
}

bool devicesDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.devicesDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool required_devicesData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_devicesdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.devicesDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.devicesDataRequest)
  return false;
#undef DO_
}

void devicesDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.devicesDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool required_devicesData = 1;
  if (this->required_devicesdata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->required_devicesdata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.devicesDataRequest)
}

::google::protobuf::uint8* devicesDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.devicesDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool required_devicesData = 1;
  if (this->required_devicesdata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->required_devicesdata(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.devicesDataRequest)
  return target;
}

size_t devicesDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.devicesDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool required_devicesData = 1;
  if (this->required_devicesdata() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devicesDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.devicesDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const devicesDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const devicesDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.devicesDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.devicesDataRequest)
    MergeFrom(*source);
  }
}

void devicesDataRequest::MergeFrom(const devicesDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.devicesDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.required_devicesdata() != 0) {
    set_required_devicesdata(from.required_devicesdata());
  }
}

void devicesDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.devicesDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devicesDataRequest::CopyFrom(const devicesDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.devicesDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devicesDataRequest::IsInitialized() const {
  return true;
}

void devicesDataRequest::Swap(devicesDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void devicesDataRequest::InternalSwap(devicesDataRequest* other) {
  using std::swap;
  swap(required_devicesdata_, other->required_devicesdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata devicesDataRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void devicesDataResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int devicesDataResponse::kDevicedataFieldNumber;
const int devicesDataResponse::kDeviceCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

devicesDataResponse::devicesDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsdevicesDataResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.devicesDataResponse)
}
devicesDataResponse::devicesDataResponse(const devicesDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      devicedata_(from.devicedata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicecount_ = from.devicecount_;
  // @@protoc_insertion_point(copy_constructor:ImageService.devicesDataResponse)
}

void devicesDataResponse::SharedCtor() {
  devicecount_ = 0;
  _cached_size_ = 0;
}

devicesDataResponse::~devicesDataResponse() {
  // @@protoc_insertion_point(destructor:ImageService.devicesDataResponse)
  SharedDtor();
}

void devicesDataResponse::SharedDtor() {
}

void devicesDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devicesDataResponse::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const devicesDataResponse& devicesDataResponse::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsdevicesDataResponse();
  return *internal_default_instance();
}

devicesDataResponse* devicesDataResponse::New(::google::protobuf::Arena* arena) const {
  devicesDataResponse* n = new devicesDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void devicesDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.devicesDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicedata_.Clear();
  devicecount_ = 0;
  _internal_metadata_.Clear();
}

bool devicesDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.devicesDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ImageService.deviceData devicedata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_devicedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 deviceCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.devicesDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.devicesDataResponse)
  return false;
#undef DO_
}

void devicesDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.devicesDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ImageService.deviceData devicedata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devicedata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devicedata(static_cast<int>(i)), output);
  }

  // int32 deviceCount = 2;
  if (this->devicecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->devicecount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.devicesDataResponse)
}

::google::protobuf::uint8* devicesDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.devicesDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ImageService.deviceData devicedata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devicedata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->devicedata(static_cast<int>(i)), deterministic, target);
  }

  // int32 deviceCount = 2;
  if (this->devicecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->devicecount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.devicesDataResponse)
  return target;
}

size_t devicesDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.devicesDataResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ImageService.deviceData devicedata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->devicedata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devicedata(static_cast<int>(i)));
    }
  }

  // int32 deviceCount = 2;
  if (this->devicecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->devicecount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devicesDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.devicesDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const devicesDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const devicesDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.devicesDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.devicesDataResponse)
    MergeFrom(*source);
  }
}

void devicesDataResponse::MergeFrom(const devicesDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.devicesDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devicedata_.MergeFrom(from.devicedata_);
  if (from.devicecount() != 0) {
    set_devicecount(from.devicecount());
  }
}

void devicesDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.devicesDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devicesDataResponse::CopyFrom(const devicesDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.devicesDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devicesDataResponse::IsInitialized() const {
  return true;
}

void devicesDataResponse::Swap(devicesDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void devicesDataResponse::InternalSwap(devicesDataResponse* other) {
  using std::swap;
  devicedata_.InternalSwap(&other->devicedata_);
  swap(devicecount_, other->devicecount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata devicesDataResponse::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PixelImageData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PixelImageData::kNameFieldNumber;
const int PixelImageData::kFormatFieldNumber;
const int PixelImageData::kDataFieldNumber;
const int PixelImageData::kWidthFieldNumber;
const int PixelImageData::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PixelImageData::PixelImageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsPixelImageData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.PixelImageData)
}
PixelImageData::PixelImageData(const PixelImageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:ImageService.PixelImageData)
}

void PixelImageData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _cached_size_ = 0;
}

PixelImageData::~PixelImageData() {
  // @@protoc_insertion_point(destructor:ImageService.PixelImageData)
  SharedDtor();
}

void PixelImageData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PixelImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelImageData::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PixelImageData& PixelImageData::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsPixelImageData();
  return *internal_default_instance();
}

PixelImageData* PixelImageData::New(::google::protobuf::Arena* arena) const {
  PixelImageData* n = new PixelImageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PixelImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.PixelImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool PixelImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.PixelImageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.PixelImageData.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.PixelImageData.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.PixelImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.PixelImageData)
  return false;
#undef DO_
}

void PixelImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.PixelImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.PixelImageData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.PixelImageData.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // uint64 width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->width(), output);
  }

  // uint64 height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.PixelImageData)
}

::google::protobuf::uint8* PixelImageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.PixelImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.PixelImageData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.PixelImageData.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // uint64 width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->width(), target);
  }

  // uint64 height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.PixelImageData)
  return target;
}

size_t PixelImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.PixelImageData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string format = 2;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->width());
  }

  // uint64 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelImageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.PixelImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const PixelImageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PixelImageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.PixelImageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.PixelImageData)
    MergeFrom(*source);
  }
}

void PixelImageData::MergeFrom(const PixelImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.PixelImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void PixelImageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.PixelImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelImageData::CopyFrom(const PixelImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.PixelImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelImageData::IsInitialized() const {
  return true;
}

void PixelImageData::Swap(PixelImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PixelImageData::InternalSwap(PixelImageData* other) {
  using std::swap;
  name_.Swap(&other->name_);
  format_.Swap(&other->format_);
  data_.Swap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PixelImageData::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageRequest::kRequiredTimestampFieldNumber;
const int ImageRequest::kRequestChannelNameFieldNumber;
const int ImageRequest::kRequestDeviceNameFieldNumber;
const int ImageRequest::kImageNameFieldNumber;
const int ImageRequest::kImageIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageRequest::ImageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsImageRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.ImageRequest)
}
ImageRequest::ImageRequest(const ImageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_name_(from.image_name_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_channel_name().size() > 0) {
    request_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_channel_name_);
  }
  request_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_device_name().size() > 0) {
    request_device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_device_name_);
  }
  ::memcpy(&required_timestamp_, &from.required_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_index_) -
    reinterpret_cast<char*>(&required_timestamp_)) + sizeof(image_index_));
  // @@protoc_insertion_point(copy_constructor:ImageService.ImageRequest)
}

void ImageRequest::SharedCtor() {
  request_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&required_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_index_) -
      reinterpret_cast<char*>(&required_timestamp_)) + sizeof(image_index_));
  _cached_size_ = 0;
}

ImageRequest::~ImageRequest() {
  // @@protoc_insertion_point(destructor:ImageService.ImageRequest)
  SharedDtor();
}

void ImageRequest::SharedDtor() {
  request_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageRequest& ImageRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsImageRequest();
  return *internal_default_instance();
}

ImageRequest* ImageRequest::New(::google::protobuf::Arena* arena) const {
  ImageRequest* n = new ImageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.ImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_name_.Clear();
  request_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&required_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_index_) -
      reinterpret_cast<char*>(&required_timestamp_)) + sizeof(image_index_));
  _internal_metadata_.Clear();
}

bool ImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.ImageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 required_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &required_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_channel_name().data(), static_cast<int>(this->request_channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageRequest.request_channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_device_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_device_name().data(), static_cast<int>(this->request_device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageRequest.request_device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string image_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_image_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_name(this->image_name_size() - 1).data(),
            static_cast<int>(this->image_name(this->image_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageRequest.image_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 image_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &image_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.ImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.ImageRequest)
  return false;
#undef DO_
}

void ImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.ImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 required_timestamp = 1;
  if (this->required_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->required_timestamp(), output);
  }

  // string request_channel_name = 2;
  if (this->request_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_channel_name().data(), static_cast<int>(this->request_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageRequest.request_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_channel_name(), output);
  }

  // string request_device_name = 3;
  if (this->request_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_device_name().data(), static_cast<int>(this->request_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageRequest.request_device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->request_device_name(), output);
  }

  // repeated string image_name = 4;
  for (int i = 0, n = this->image_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name(i).data(), static_cast<int>(this->image_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageRequest.image_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->image_name(i), output);
  }

  // uint64 image_index = 5;
  if (this->image_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->image_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.ImageRequest)
}

::google::protobuf::uint8* ImageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.ImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 required_timestamp = 1;
  if (this->required_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->required_timestamp(), target);
  }

  // string request_channel_name = 2;
  if (this->request_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_channel_name().data(), static_cast<int>(this->request_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageRequest.request_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_channel_name(), target);
  }

  // string request_device_name = 3;
  if (this->request_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_device_name().data(), static_cast<int>(this->request_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageRequest.request_device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->request_device_name(), target);
  }

  // repeated string image_name = 4;
  for (int i = 0, n = this->image_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name(i).data(), static_cast<int>(this->image_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageRequest.image_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->image_name(i), target);
  }

  // uint64 image_index = 5;
  if (this->image_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->image_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.ImageRequest)
  return target;
}

size_t ImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.ImageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string image_name = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->image_name_size());
  for (int i = 0, n = this->image_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->image_name(i));
  }

  // string request_channel_name = 2;
  if (this->request_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_channel_name());
  }

  // string request_device_name = 3;
  if (this->request_device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_device_name());
  }

  // uint64 required_timestamp = 1;
  if (this->required_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->required_timestamp());
  }

  // uint64 image_index = 5;
  if (this->image_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->image_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.ImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.ImageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.ImageRequest)
    MergeFrom(*source);
  }
}

void ImageRequest::MergeFrom(const ImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.ImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_name_.MergeFrom(from.image_name_);
  if (from.request_channel_name().size() > 0) {

    request_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_channel_name_);
  }
  if (from.request_device_name().size() > 0) {

    request_device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_device_name_);
  }
  if (from.required_timestamp() != 0) {
    set_required_timestamp(from.required_timestamp());
  }
  if (from.image_index() != 0) {
    set_image_index(from.image_index());
  }
}

void ImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageRequest::CopyFrom(const ImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRequest::IsInitialized() const {
  return true;
}

void ImageRequest::Swap(ImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageRequest::InternalSwap(ImageRequest* other) {
  using std::swap;
  image_name_.InternalSwap(&other->image_name_);
  request_channel_name_.Swap(&other->request_channel_name_);
  request_device_name_.Swap(&other->request_device_name_);
  swap(required_timestamp_, other->required_timestamp_);
  swap(image_index_, other->image_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageResponse::kRecievedTimestampFieldNumber;
const int ImageResponse::kResponseChannelNameFieldNumber;
const int ImageResponse::kBaseImageNameFieldNumber;
const int ImageResponse::kBaseImageFieldNumber;
const int ImageResponse::kImageBytesFieldNumber;
const int ImageResponse::kResponseDeviceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageResponse::ImageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsImageResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.ImageResponse)
}
ImageResponse::ImageResponse(const ImageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_bytes_(from.image_bytes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_channel_name().size() > 0) {
    response_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_channel_name_);
  }
  base_image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.base_image_name().size() > 0) {
    base_image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_image_name_);
  }
  base_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.base_image().size() > 0) {
    base_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_image_);
  }
  response_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_device_name().size() > 0) {
    response_device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_device_name_);
  }
  recieved_timestamp_ = from.recieved_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ImageService.ImageResponse)
}

void ImageResponse::SharedCtor() {
  response_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recieved_timestamp_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ImageResponse::~ImageResponse() {
  // @@protoc_insertion_point(destructor:ImageService.ImageResponse)
  SharedDtor();
}

void ImageResponse::SharedDtor() {
  response_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_image_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageResponse::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageResponse& ImageResponse::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsImageResponse();
  return *internal_default_instance();
}

ImageResponse* ImageResponse::New(::google::protobuf::Arena* arena) const {
  ImageResponse* n = new ImageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.ImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_bytes_.Clear();
  response_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recieved_timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.ImageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 recieved_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recieved_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_channel_name().data(), static_cast<int>(this->response_channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageResponse.response_channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string base_image_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_image_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->base_image_name().data(), static_cast<int>(this->base_image_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageResponse.base_image_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes base_image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ImageService.PixelImageData image_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_device_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_device_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_device_name().data(), static_cast<int>(this->response_device_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageResponse.response_device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.ImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.ImageResponse)
  return false;
#undef DO_
}

void ImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.ImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 recieved_timestamp = 1;
  if (this->recieved_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recieved_timestamp(), output);
  }

  // string response_channel_name = 2;
  if (this->response_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_channel_name().data(), static_cast<int>(this->response_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageResponse.response_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_channel_name(), output);
  }

  // string base_image_name = 3;
  if (this->base_image_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_image_name().data(), static_cast<int>(this->base_image_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageResponse.base_image_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->base_image_name(), output);
  }

  // bytes base_image = 4;
  if (this->base_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->base_image(), output);
  }

  // repeated .ImageService.PixelImageData image_bytes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_bytes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->image_bytes(static_cast<int>(i)), output);
  }

  // string response_device_name = 6;
  if (this->response_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_device_name().data(), static_cast<int>(this->response_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageResponse.response_device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->response_device_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.ImageResponse)
}

::google::protobuf::uint8* ImageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.ImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 recieved_timestamp = 1;
  if (this->recieved_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recieved_timestamp(), target);
  }

  // string response_channel_name = 2;
  if (this->response_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_channel_name().data(), static_cast<int>(this->response_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageResponse.response_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_channel_name(), target);
  }

  // string base_image_name = 3;
  if (this->base_image_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_image_name().data(), static_cast<int>(this->base_image_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageResponse.base_image_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->base_image_name(), target);
  }

  // bytes base_image = 4;
  if (this->base_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->base_image(), target);
  }

  // repeated .ImageService.PixelImageData image_bytes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_bytes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->image_bytes(static_cast<int>(i)), deterministic, target);
  }

  // string response_device_name = 6;
  if (this->response_device_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_device_name().data(), static_cast<int>(this->response_device_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageResponse.response_device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->response_device_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.ImageResponse)
  return target;
}

size_t ImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.ImageResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ImageService.PixelImageData image_bytes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->image_bytes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_bytes(static_cast<int>(i)));
    }
  }

  // string response_channel_name = 2;
  if (this->response_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_channel_name());
  }

  // string base_image_name = 3;
  if (this->base_image_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base_image_name());
  }

  // bytes base_image = 4;
  if (this->base_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->base_image());
  }

  // string response_device_name = 6;
  if (this->response_device_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_device_name());
  }

  // uint64 recieved_timestamp = 1;
  if (this->recieved_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->recieved_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.ImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.ImageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.ImageResponse)
    MergeFrom(*source);
  }
}

void ImageResponse::MergeFrom(const ImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.ImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_bytes_.MergeFrom(from.image_bytes_);
  if (from.response_channel_name().size() > 0) {

    response_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_channel_name_);
  }
  if (from.base_image_name().size() > 0) {

    base_image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_image_name_);
  }
  if (from.base_image().size() > 0) {

    base_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_image_);
  }
  if (from.response_device_name().size() > 0) {

    response_device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_device_name_);
  }
  if (from.recieved_timestamp() != 0) {
    set_recieved_timestamp(from.recieved_timestamp());
  }
}

void ImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.ImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageResponse::CopyFrom(const ImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.ImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResponse::IsInitialized() const {
  return true;
}

void ImageResponse::Swap(ImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageResponse::InternalSwap(ImageResponse* other) {
  using std::swap;
  image_bytes_.InternalSwap(&other->image_bytes_);
  response_channel_name_.Swap(&other->response_channel_name_);
  base_image_name_.Swap(&other->base_image_name_);
  base_image_.Swap(&other->base_image_);
  response_device_name_.Swap(&other->response_device_name_);
  swap(recieved_timestamp_, other->recieved_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageResponse::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageDeleteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDeleteRequest::kRequiredTimestampFieldNumber;
const int ImageDeleteRequest::kRequestChannelNameFieldNumber;
const int ImageDeleteRequest::kImageNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDeleteRequest::ImageDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsImageDeleteRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.ImageDeleteRequest)
}
ImageDeleteRequest::ImageDeleteRequest(const ImageDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_name_(from.image_name_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_channel_name().size() > 0) {
    request_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_channel_name_);
  }
  required_timestamp_ = from.required_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ImageService.ImageDeleteRequest)
}

void ImageDeleteRequest::SharedCtor() {
  request_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_timestamp_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ImageDeleteRequest::~ImageDeleteRequest() {
  // @@protoc_insertion_point(destructor:ImageService.ImageDeleteRequest)
  SharedDtor();
}

void ImageDeleteRequest::SharedDtor() {
  request_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDeleteRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDeleteRequest& ImageDeleteRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsImageDeleteRequest();
  return *internal_default_instance();
}

ImageDeleteRequest* ImageDeleteRequest::New(::google::protobuf::Arena* arena) const {
  ImageDeleteRequest* n = new ImageDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.ImageDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_name_.Clear();
  request_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  required_timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ImageDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.ImageDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 required_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &required_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_channel_name().data(), static_cast<int>(this->request_channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageDeleteRequest.request_channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string image_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_image_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_name(this->image_name_size() - 1).data(),
            static_cast<int>(this->image_name(this->image_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.ImageDeleteRequest.image_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.ImageDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.ImageDeleteRequest)
  return false;
#undef DO_
}

void ImageDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.ImageDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 required_timestamp = 1;
  if (this->required_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->required_timestamp(), output);
  }

  // string request_channel_name = 2;
  if (this->request_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_channel_name().data(), static_cast<int>(this->request_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageDeleteRequest.request_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_channel_name(), output);
  }

  // repeated string image_name = 3;
  for (int i = 0, n = this->image_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name(i).data(), static_cast<int>(this->image_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageDeleteRequest.image_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->image_name(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.ImageDeleteRequest)
}

::google::protobuf::uint8* ImageDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.ImageDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 required_timestamp = 1;
  if (this->required_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->required_timestamp(), target);
  }

  // string request_channel_name = 2;
  if (this->request_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_channel_name().data(), static_cast<int>(this->request_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageDeleteRequest.request_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_channel_name(), target);
  }

  // repeated string image_name = 3;
  for (int i = 0, n = this->image_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_name(i).data(), static_cast<int>(this->image_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.ImageDeleteRequest.image_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->image_name(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.ImageDeleteRequest)
  return target;
}

size_t ImageDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.ImageDeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string image_name = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->image_name_size());
  for (int i = 0, n = this->image_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->image_name(i));
  }

  // string request_channel_name = 2;
  if (this->request_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_channel_name());
  }

  // uint64 required_timestamp = 1;
  if (this->required_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->required_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.ImageDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.ImageDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.ImageDeleteRequest)
    MergeFrom(*source);
  }
}

void ImageDeleteRequest::MergeFrom(const ImageDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.ImageDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_name_.MergeFrom(from.image_name_);
  if (from.request_channel_name().size() > 0) {

    request_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_channel_name_);
  }
  if (from.required_timestamp() != 0) {
    set_required_timestamp(from.required_timestamp());
  }
}

void ImageDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.ImageDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDeleteRequest::CopyFrom(const ImageDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.ImageDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDeleteRequest::IsInitialized() const {
  return true;
}

void ImageDeleteRequest::Swap(ImageDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDeleteRequest::InternalSwap(ImageDeleteRequest* other) {
  using std::swap;
  image_name_.InternalSwap(&other->image_name_);
  request_channel_name_.Swap(&other->request_channel_name_);
  swap(required_timestamp_, other->required_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDeleteRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PixelLabelWriteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PixelLabelWriteRequest::kRecievedTimestampFieldNumber;
const int PixelLabelWriteRequest::kResponseChannelNameFieldNumber;
const int PixelLabelWriteRequest::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PixelLabelWriteRequest::PixelLabelWriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsPixelLabelWriteRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.PixelLabelWriteRequest)
}
PixelLabelWriteRequest::PixelLabelWriteRequest(const PixelLabelWriteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_(from.image_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_channel_name().size() > 0) {
    response_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_channel_name_);
  }
  recieved_timestamp_ = from.recieved_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ImageService.PixelLabelWriteRequest)
}

void PixelLabelWriteRequest::SharedCtor() {
  response_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recieved_timestamp_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PixelLabelWriteRequest::~PixelLabelWriteRequest() {
  // @@protoc_insertion_point(destructor:ImageService.PixelLabelWriteRequest)
  SharedDtor();
}

void PixelLabelWriteRequest::SharedDtor() {
  response_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PixelLabelWriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelLabelWriteRequest::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PixelLabelWriteRequest& PixelLabelWriteRequest::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsPixelLabelWriteRequest();
  return *internal_default_instance();
}

PixelLabelWriteRequest* PixelLabelWriteRequest::New(::google::protobuf::Arena* arena) const {
  PixelLabelWriteRequest* n = new PixelLabelWriteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PixelLabelWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.PixelLabelWriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.Clear();
  response_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recieved_timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool PixelLabelWriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.PixelLabelWriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 recieved_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recieved_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_channel_name().data(), static_cast<int>(this->response_channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ImageService.PixelLabelWriteRequest.response_channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ImageService.PixelImageData image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.PixelLabelWriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.PixelLabelWriteRequest)
  return false;
#undef DO_
}

void PixelLabelWriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.PixelLabelWriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 recieved_timestamp = 1;
  if (this->recieved_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recieved_timestamp(), output);
  }

  // string response_channel_name = 2;
  if (this->response_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_channel_name().data(), static_cast<int>(this->response_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.PixelLabelWriteRequest.response_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_channel_name(), output);
  }

  // repeated .ImageService.PixelImageData image = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.PixelLabelWriteRequest)
}

::google::protobuf::uint8* PixelLabelWriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.PixelLabelWriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 recieved_timestamp = 1;
  if (this->recieved_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recieved_timestamp(), target);
  }

  // string response_channel_name = 2;
  if (this->response_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_channel_name().data(), static_cast<int>(this->response_channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ImageService.PixelLabelWriteRequest.response_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_channel_name(), target);
  }

  // repeated .ImageService.PixelImageData image = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->image(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.PixelLabelWriteRequest)
  return target;
}

size_t PixelLabelWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.PixelLabelWriteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ImageService.PixelImageData image = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->image_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image(static_cast<int>(i)));
    }
  }

  // string response_channel_name = 2;
  if (this->response_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_channel_name());
  }

  // uint64 recieved_timestamp = 1;
  if (this->recieved_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->recieved_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelLabelWriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.PixelLabelWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PixelLabelWriteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PixelLabelWriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.PixelLabelWriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.PixelLabelWriteRequest)
    MergeFrom(*source);
  }
}

void PixelLabelWriteRequest::MergeFrom(const PixelLabelWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.PixelLabelWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  if (from.response_channel_name().size() > 0) {

    response_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_channel_name_);
  }
  if (from.recieved_timestamp() != 0) {
    set_recieved_timestamp(from.recieved_timestamp());
  }
}

void PixelLabelWriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.PixelLabelWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelLabelWriteRequest::CopyFrom(const PixelLabelWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.PixelLabelWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelLabelWriteRequest::IsInitialized() const {
  return true;
}

void PixelLabelWriteRequest::Swap(PixelLabelWriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PixelLabelWriteRequest::InternalSwap(PixelLabelWriteRequest* other) {
  using std::swap;
  image_.InternalSwap(&other->image_);
  response_channel_name_.Swap(&other->response_channel_name_);
  swap(recieved_timestamp_, other->recieved_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PixelLabelWriteRequest::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PixelLabelWriteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PixelLabelWriteResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PixelLabelWriteResponse::PixelLabelWriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsPixelLabelWriteResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.PixelLabelWriteResponse)
}
PixelLabelWriteResponse::PixelLabelWriteResponse(const PixelLabelWriteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ImageService.PixelLabelWriteResponse)
}

void PixelLabelWriteResponse::SharedCtor() {
  status_ = false;
  _cached_size_ = 0;
}

PixelLabelWriteResponse::~PixelLabelWriteResponse() {
  // @@protoc_insertion_point(destructor:ImageService.PixelLabelWriteResponse)
  SharedDtor();
}

void PixelLabelWriteResponse::SharedDtor() {
}

void PixelLabelWriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelLabelWriteResponse::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PixelLabelWriteResponse& PixelLabelWriteResponse::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsPixelLabelWriteResponse();
  return *internal_default_instance();
}

PixelLabelWriteResponse* PixelLabelWriteResponse::New(::google::protobuf::Arena* arena) const {
  PixelLabelWriteResponse* n = new PixelLabelWriteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PixelLabelWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.PixelLabelWriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear();
}

bool PixelLabelWriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.PixelLabelWriteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.PixelLabelWriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.PixelLabelWriteResponse)
  return false;
#undef DO_
}

void PixelLabelWriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.PixelLabelWriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.PixelLabelWriteResponse)
}

::google::protobuf::uint8* PixelLabelWriteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.PixelLabelWriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.PixelLabelWriteResponse)
  return target;
}

size_t PixelLabelWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.PixelLabelWriteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelLabelWriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.PixelLabelWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PixelLabelWriteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PixelLabelWriteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.PixelLabelWriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.PixelLabelWriteResponse)
    MergeFrom(*source);
  }
}

void PixelLabelWriteResponse::MergeFrom(const PixelLabelWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.PixelLabelWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void PixelLabelWriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.PixelLabelWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelLabelWriteResponse::CopyFrom(const PixelLabelWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.PixelLabelWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelLabelWriteResponse::IsInitialized() const {
  return true;
}

void PixelLabelWriteResponse::Swap(PixelLabelWriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PixelLabelWriteResponse::InternalSwap(PixelLabelWriteResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PixelLabelWriteResponse::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HFLResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HFLResponse::kTimestampFieldNumber;
const int HFLResponse::kIntensityImageFieldNumber;
const int HFLResponse::kDistanceImageFieldNumber;
const int HFLResponse::kHFLImageIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HFLResponse::HFLResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imageservice_2eproto::InitDefaultsHFLResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageService.HFLResponse)
}
HFLResponse::HFLResponse(const HFLResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intensity_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.intensity_image().size() > 0) {
    intensity_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.intensity_image_);
  }
  distance_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.distance_image().size() > 0) {
    distance_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distance_image_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&hfl_image_index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(hfl_image_index_));
  // @@protoc_insertion_point(copy_constructor:ImageService.HFLResponse)
}

void HFLResponse::SharedCtor() {
  intensity_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hfl_image_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hfl_image_index_));
  _cached_size_ = 0;
}

HFLResponse::~HFLResponse() {
  // @@protoc_insertion_point(destructor:ImageService.HFLResponse)
  SharedDtor();
}

void HFLResponse::SharedDtor() {
  intensity_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HFLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HFLResponse::descriptor() {
  ::protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HFLResponse& HFLResponse::default_instance() {
  ::protobuf_imageservice_2eproto::InitDefaultsHFLResponse();
  return *internal_default_instance();
}

HFLResponse* HFLResponse::New(::google::protobuf::Arena* arena) const {
  HFLResponse* n = new HFLResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HFLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageService.HFLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intensity_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hfl_image_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hfl_image_index_));
  _internal_metadata_.Clear();
}

bool HFLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageService.HFLResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes intensity_image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_intensity_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes distance_image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_distance_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 HFL_image_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hfl_image_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageService.HFLResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageService.HFLResponse)
  return false;
#undef DO_
}

void HFLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageService.HFLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // bytes intensity_image = 2;
  if (this->intensity_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->intensity_image(), output);
  }

  // bytes distance_image = 3;
  if (this->distance_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->distance_image(), output);
  }

  // uint64 HFL_image_index = 4;
  if (this->hfl_image_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hfl_image_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ImageService.HFLResponse)
}

::google::protobuf::uint8* HFLResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageService.HFLResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // bytes intensity_image = 2;
  if (this->intensity_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->intensity_image(), target);
  }

  // bytes distance_image = 3;
  if (this->distance_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->distance_image(), target);
  }

  // uint64 HFL_image_index = 4;
  if (this->hfl_image_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hfl_image_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageService.HFLResponse)
  return target;
}

size_t HFLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageService.HFLResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes intensity_image = 2;
  if (this->intensity_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->intensity_image());
  }

  // bytes distance_image = 3;
  if (this->distance_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->distance_image());
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint64 HFL_image_index = 4;
  if (this->hfl_image_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hfl_image_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HFLResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageService.HFLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HFLResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HFLResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageService.HFLResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageService.HFLResponse)
    MergeFrom(*source);
  }
}

void HFLResponse::MergeFrom(const HFLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageService.HFLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.intensity_image().size() > 0) {

    intensity_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.intensity_image_);
  }
  if (from.distance_image().size() > 0) {

    distance_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distance_image_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.hfl_image_index() != 0) {
    set_hfl_image_index(from.hfl_image_index());
  }
}

void HFLResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageService.HFLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HFLResponse::CopyFrom(const HFLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageService.HFLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HFLResponse::IsInitialized() const {
  return true;
}

void HFLResponse::Swap(HFLResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HFLResponse::InternalSwap(HFLResponse* other) {
  using std::swap;
  intensity_image_.Swap(&other->intensity_image_);
  distance_image_.Swap(&other->distance_image_);
  swap(timestamp_, other->timestamp_);
  swap(hfl_image_index_, other->hfl_image_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HFLResponse::GetMetadata() const {
  protobuf_imageservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imageservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ImageService

// @@protoc_insertion_point(global_scope)
